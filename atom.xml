<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Blog</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-13T15:22:50.177Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Summer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2021/06/05/hello-world/"/>
    <id>http://yoursite.com/2021/06/05/hello-world/</id>
    <published>2021-06-04T16:29:35.175Z</published>
    <updated>2019-08-13T15:22:50.177Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java设计模式总结之23种设计模式</title>
    <link href="http://yoursite.com/2020/02/14/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93%E4%B9%8B23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/02/14/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93%E4%B9%8B23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-02-14T04:13:45.000Z</published>
    <updated>2020-03-14T11:39:00.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java设计模式"><a href="#java设计模式" class="headerlink" title="java设计模式"></a>java设计模式</h1><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>总体来说设计模式分为三大类：</p><p><strong>创建型模式</strong>，共五种：</p><p>工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p><p>结构型模式，共七种：</p><p>适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><p>行为型模式，共十一种：</p><p>策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><p>其实还有两类：并发型模式和线程池模式。</p><p><strong>GoF（四小组/四小队） 的 23 种设计模式的分类表</strong></p><table><thead><tr><th>范围\目的</th><th>创建型模式</th><th>结构型模式</th></tr></thead><tbody><tr><td>类模式</td><td>工厂方法</td><td>(类）适配器</td></tr><tr><td>对象模式</td><td>单例 原型 抽象工厂 建造者</td><td>代理 (对象）适配器 桥接 装饰 外观 享元 组合</td></tr></tbody></table><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><p><strong>总原则：开闭原则（Open Close Principle）</strong></p><p>开闭原则就是说<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。</p><p><strong>1、单一职责原则</strong></p><p>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。</p><p><strong>2、里氏替换原则（Liskov Substitution Principle）</strong></p><p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</p><p>历史替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p><p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p><p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p><p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p><p>这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p><p><strong>5、迪米特法则（最少知道原则）（Demeter Principle）</strong></p><p>就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</p><p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p><p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p><p>原则是尽量首先使用合成/聚合的方式，而不是使用继承。</p><h2 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h2><ol><li>单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</li><li>原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</li><li>工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。</li><li>抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</li><li>建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</li><li>代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</li><li>适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</li><li>桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</li><li>装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。</li><li>外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</li><li>享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。</li><li>组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</li><li>模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</li><li>策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</li><li>命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</li><li>职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</li><li>状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。</li><li>观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</li><li>中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</li><li>迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</li><li>访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</li><li>备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</li><li>解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</li></ol><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="1-饿汉式—静态常量方式（线程安全）"><a href="#1-饿汉式—静态常量方式（线程安全）" class="headerlink" title="1.饿汉式—静态常量方式（线程安全）"></a>1.饿汉式—静态常量方式（线程安全）</h3><p>类加载时就初始化实例，避免了多线程同步问题。天然线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//私有的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//方法的实例化私有对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="comment">//静态工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-饿汉式—静态代码块方式（线程安全）"><a href="#2-饿汉式—静态代码块方式（线程安全）" class="headerlink" title="2.饿汉式—静态代码块方式（线程安全）"></a>2.饿汉式—静态代码块方式（线程安全）</h3><p>其实就是在上面 静态常量饿汉式 实现上稍微变动了一下，<font color="#ff0000"><strong>将类的实例化放在了静态代码块中</strong></font>而已。其他没区别。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//静态化实例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-懒汉式（线程不安全）"><a href="#3-懒汉式（线程不安全）" class="headerlink" title="3.懒汉式（线程不安全）"></a>3.懒汉式（线程不安全）</h3><p>这是最基本的实现方式，第一次调用才初始化，实现了懒加载的特性。多线程场景下禁止使用，因为可能会产生多个对象，不再是单例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-懒汉式（线程安全，方法上加同步锁）"><a href="#4-懒汉式（线程安全，方法上加同步锁）" class="headerlink" title="4.懒汉式（线程安全，方法上加同步锁）"></a>4.懒汉式（线程安全，方法上加同步锁）</h3><p>和上面 懒汉式（线程不安全）实现上唯一不同是：获取实例的getInstance()方法上加了同步锁。保证了多线程场景下的单例。但是效率会有所折损，不过还好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-双重校验锁（线程安全，效率高）"><a href="#5-双重校验锁（线程安全，效率高）" class="headerlink" title="5.双重校验锁（线程安全，效率高）"></a>5.双重校验锁（线程安全，效率高）</h3><p>此种实现中不用每次需要获得锁，减少了获取锁和等待的事件。<br>注意volatile关键字的使用，保证了各线程对singleton静态实例域修改的可见性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-静态内部类实现单例（线程安全、效率高）"><a href="#6-静态内部类实现单例（线程安全、效率高）" class="headerlink" title="6.静态内部类实现单例（线程安全、效率高）"></a>6.静态内部类实现单例（线程安全、效率高）</h3><p>这种方式下 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。<br>注意内部类SingletonHolder要用static修饰且其中的静态变量INSTANCE必须是final的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java设计模式&quot;&gt;&lt;a href=&quot;#java设计模式&quot; class=&quot;headerlink&quot; title=&quot;java设计模式&quot;&gt;&lt;/a&gt;java设计模式&lt;/h1&gt;&lt;h2 id=&quot;设计模式分类&quot;&gt;&lt;a href=&quot;#设计模式分类&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Interview-1</title>
    <link href="http://yoursite.com/2020/02/13/Interview-1/"/>
    <id>http://yoursite.com/2020/02/13/Interview-1/</id>
    <published>2020-02-13T12:33:16.000Z</published>
    <updated>2020-02-25T10:30:57.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Interview"><a href="#Interview" class="headerlink" title="Interview"></a>Interview</h1><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h3><p>详见<font color="#00f">HashMap和HashTable的区别.md</font>中</p><p>1、HashMap是非线程安全的，HashTable是线程安全的。<br>2、HashMap的键和值都允许有null值存在，而HashTable则不行。<br>3、因为线程安全的问题，HashMap效率比HashTable的要高。</p><h3 id="Java的GC"><a href="#Java的GC" class="headerlink" title="Java的GC"></a>Java的GC</h3><p>详见<font color="#00f">java-GC.md</font>中</p><h3 id="SpringMVC运行原理"><a href="#SpringMVC运行原理" class="headerlink" title="SpringMVC运行原理"></a>SpringMVC运行原理</h3><p>客户端请求提交到DispatcherServlet</p><p>由DispatcherServlet控制器查询HandlerMapping，找到并分发到指定的Controller中。</p><p>Controller调用业务逻辑处理后，返回ModelAndView</p><p>DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图</p><p>视图负责将结果显示到客户端</p><h3 id="Session与Cookie"><a href="#Session与Cookie" class="headerlink" title="Session与Cookie"></a>Session与Cookie</h3><p>1.Cookie可以让服务端跟踪每个客户端的访问，但是每次客户端的访问都必须传回这些Cookie，如果Cookie很多，则无形的增加了客户端与服务端的数据传输量；</p><p>2.Session则很好地解决了这个问题，同一个客户端每次和服务端交互时，将数据存储通过Session到服务端，不需要每次都传回所有的Cookie值，而是传回一个ID，每个客户端第一次访问服务器生成的唯一的ID，客户端只要传回这个ID就行了，这个ID通常为NAME为JSESSIONID的一个Cookie。这样服务端就可以通过这个ID，来将存储到服务端的KV值取出了。</p><p>3.Session和Cookie的超时问题，Cookie的安全问题</p><h3 id="short-s1-1-s1-s1-1-有什么错-short-s1-1-s1-1-有什么错："><a href="#short-s1-1-s1-s1-1-有什么错-short-s1-1-s1-1-有什么错：" class="headerlink" title="short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错："></a>short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错：</h3><p>short s1 = 1; s1 = s1 + 1;有错，s1是short型，s1+1是int型,不能显式转化为short型。可修改为s1 =(short)(s1 + 1) 。</p><p>short s1 = 1; s1 += 1正确。<font color="#ff0000">强转</font></p><h3 id="Overload和Override的区别。"><a href="#Overload和Override的区别。" class="headerlink" title="Overload和Override的区别。"></a>Overload和Override的区别。</h3><h3 id="Java哪个集合类元素不能重复"><a href="#Java哪个集合类元素不能重复" class="headerlink" title="Java哪个集合类元素不能重复"></a>Java哪个集合类元素不能重复</h3><p>Set<t> 集合不允许重复的。</t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Integer&gt; testSet = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br></pre></td></tr></table></figure><p>是hashcode相等？是地址相同？是元素的equal返回true？</p><p>先比较hashCode，hashCode不同则不重复；<br>若hashCode相同，则继续判断equals，equals为true则重复，equals为false则不重复。</p><h3 id="最常见到的runtime-exception："><a href="#最常见到的runtime-exception：" class="headerlink" title="最常见到的runtime exception："></a>最常见到的runtime exception：</h3><p>ArithmeticException        ArrayStoreException        BufferOverflowException        BufferUnderflowException        CannotRedoException        CannotUndoException        ClassCastException        CMMException        ConcurrentModificationException        DOMException        EmptyStackException        IllegalArgumentException        IllegalMonitorStateException        IllegalPathStateException        IllegalStateException        ImagingOpException        IndexOutOfBoundsException        MissingResourceException        NegativeArraySizeException        NoSuchElementException        NullPointerException        ProfileDataException        ProviderException        RasterFormatException        SecurityException        SystemException        UndeclaredThrowableException        UnmodifiableSetException        UnsupportedOperationException        </p><h2 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h2><h3 id="Spring在SSM起什么作用"><a href="#Spring在SSM起什么作用" class="headerlink" title="Spring在SSM起什么作用"></a>Spring在SSM起什么作用</h3><p>Spring是一个轻量级框架，也是一个容器，</p><p>Spring实质上讲就是一个Bean工厂，主要用来管理Bean的生命周期和框架集成。</p><p>有IOC控制反转，DI依赖注入，</p><p>控制反转是把dao依赖注入到servic层，然后service层反转给action层，Spring的顶层容器为BeanFactory，常用的ApplicationContext为它的子接口，实现了工厂模式，</p><p>Spring还提供了AOP的支持，方便在切面级开发。</p><h3 id="Spring的事务，事务的作用。"><a href="#Spring的事务，事务的作用。" class="headerlink" title="Spring的事务，事务的作用。"></a>Spring的事务，事务的作用。</h3><p> 编程式事务管理：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。</p><p> 声明式事务管理：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。</p><h3 id="Spring的IOC你在项目中是怎么使用的"><a href="#Spring的IOC你在项目中是怎么使用的" class="headerlink" title="Spring的IOC你在项目中是怎么使用的"></a>Spring的IOC你在项目中是怎么使用的</h3><p>• IOC主要来解决对象之间的依赖问题,把所有的bean的依赖关系通过配置文件或者注解关联起来,降低了耦合度。</p><h3 id="Spring的配置文件有哪些内容"><a href="#Spring的配置文件有哪些内容" class="headerlink" title="Spring的配置文件有哪些内容"></a>Spring的配置文件有哪些内容</h3><p>• 开启事务注解驱动</p><p>• 事务管理器</p><p>• 开启注解功能，并配置扫描包</p><p>• 配置数据源</p><p>• 配置SQL会话工厂、别名、映射文件</p><p>• 不用编写DAO层的实现类（代理模式）</p><h3 id="Spring的注解"><a href="#Spring的注解" class="headerlink" title="Spring的注解"></a>Spring的注解</h3><p><strong>1、声明bean的注解</strong></p><p>@Component 组件    @Service （service层）@Repository （dao层）@Controller 展现层</p><p><strong>2、注入bean的注解</strong></p><p>@Autowired；@Inject；@Resource；</p><p>都可以注解在set方法和属性上，推荐注解在属性上（一目了然，少写代码）。</p><p>@Inject：由JSR-330提供</p><p>@Resource：由JSR-250提供</p><p>都可以注解在set方法和属性上，推荐注解在属性上（一目了然，少写代码）。</p><p><strong>3、java配置类相关注解</strong></p><p>@Configuration 声明当前类为<strong>配置类</strong>，相当于xml形式的Spring配置（类上）</p><p>@Bean 注解在<strong>方法</strong>上，声明当前方法的返回值为一个bean，替代xml中的方式（方法上）</p><p>@Component ：@Configuration 声明当前类为配置类，其中内部组合了@Component注解，表明这个类是一个bean（类上）</p><p>@ComponentScan 用于对Component进行扫描，相当于xml中的（类上）</p><p>@WishlyConfiguration 为@Configuration与@ComponentScan的组合注解，可以替代这两个注解</p><p><strong>4、切面（AOP）相关注解</strong></p><p>Spring支持AspectJ的注解式切面编程。</p><p>@Aspect 声明一个切面（类上）<br>使用@After、@Before、@Around定义建言（advice），可直接将拦截规则（切点）作为参数。</p><p>@PointCut 声明切点<br>在java配置类中使用@EnableAspectJAutoProxy注解开启Spring对AspectJ代理的支持（类上）</p><p><strong>5、@Bean的属性支持</strong></p><p>@Scope 设置Spring容器如何新建Bean实例（方法上，得有@Bean）<br>其设置类型包括：</p><p>Singleton （单例,一个Spring容器中只有一个bean实例，默认模式）,<br>Protetype （每次调用新建一个bean）,<br>Request （web项目中，给每个http request新建一个bean）,<br>Session （web项目中，给每个http session新建一个bean）,<br>GlobalSession（给每一个 global http session新建一个Bean实例）</p><p>@StepScope 在Spring Batch中还有涉及</p><p>@PostConstruct 由JSR-250提供，在构造函数执行完之后执行，等价于xml配置文件中bean的initMethod</p><p>@PreDestory 由JSR-250提供，在Bean销毁之前执行，等价于xml配置文件中bean的destroyMethod</p><p><strong>6、@Value注解</strong></p><p>@Value 为属性注入值（属性上）<br>支持如下方式的注入：<br>》注入普通字符</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGzYlBica1Yoh04yOwkJRVW36yOic9uJp73qy4EJ14hJFoeNR7uTYkXc5D9zW5xq2gqguaFV8jRuZJw/640?wx_fmt=png" alt="img"></p><p>》注入操作系统属性</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGzYlBica1Yoh04yOwkJRVW3TaL5IQCBlVHH1TtTIwEj18yia0oB1j6xf01Icicvq5iaBiaTFicQVloibg9g/640?wx_fmt=png" alt="img"></p><p>》注入表达式结果</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGzYlBica1Yoh04yOwkJRVW3ZZeAGw9fKhqicOpnibeh7sw2rCiaoic4PIh0qeCDY4hJg0n34aPiaIaKiaEw/640?wx_fmt=png" alt="img"></p><p>》注入其它bean属性</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGzYlBica1Yoh04yOwkJRVW33FxlpUsmticMraMr8Nnz6LVobQThzEuoGMcRLqu4WeJEDEaicClYvRFQ/640?wx_fmt=png" alt="img"></p><p>》注入文件资源</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGzYlBica1Yoh04yOwkJRVW3aa0FXzyzD5UZHFqFibAg7AsyzwWFAT1QbUx76EnbBdPfmZyObkEXtJw/640?wx_fmt=png" alt="img"></p><p>》注入网站资源</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGzYlBica1Yoh04yOwkJRVW3wvwkdc7BGics3Joka0zmljoVzHKcoc6tN4CnSU2U3icJzqHBLXz5ORtg/640?wx_fmt=png" alt="img"></p><p>》注入配置文件</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGzYlBica1Yoh04yOwkJRVW3XV4ljmctSfniaP7XWRhPOuTBIZnLSo8iaGKsLpMauNNUMoZRia51TBGUw/640?wx_fmt=png" alt="img"></p><p>注入配置使用方法：<br>① 编写配置文件（test.properties）</p><p>book.name=《三体》</p><p>② @PropertySource 加载配置文件(类上)</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGzYlBica1Yoh04yOwkJRVW3QxbL1MJh9Z0rJ3F43HX6cEiatZyUtGLfphbEyb1WLTtOfGHLGeiaicrHg/640?wx_fmt=png" alt="img"></p><p>③ 还需配置一个PropertySourcesPlaceholderConfigurer的bean。</p><p><strong>7、环境切换</strong></p><p>@Profile 通过设定Environment的ActiveProfiles来设定当前context需要使用的配置环境。（类或方法上）</p><p>@Conditional Spring4中可以使用此注解定义条件话的bean，通过实现Condition接口，并重写matches方法，从而决定该bean是否被实例化。（方法上）</p><p><strong>8、异步相关</strong></p><p>@EnableAsync 配置类中，通过此注解开启对异步任务的支持，叙事性AsyncConfigurer接口（类上）</p><p>@Async 在实际执行的bean方法使用该注解来申明其是一个异步任务（方法上或类上所有的方法都将异步，需要@EnableAsync开启异步任务）</p><p><strong>9、定时任务相关</strong></p><p>@EnableScheduling 在配置类上使用，开启计划任务的支持（类上）</p><p>@Scheduled 来申明这是一个任务，包括cron,fixDelay,fixRate等类型（方法上，需先开启计划任务的支持）</p><p><strong>10、@Enable*注解说明</strong></p><p>这些注解主要用来开启对xxx的支持。<br>@EnableAspectJAutoProxy 开启对AspectJ自动代理的支持</p><p>@EnableAsync 开启异步方法的支持</p><p>@EnableScheduling 开启计划任务的支持</p><p>@EnableWebMvc 开启Web MVC的配置支持</p><p>@EnableConfigurationProperties 开启对@ConfigurationProperties注解配置Bean的支持</p><p>@EnableJpaRepositories 开启对SpringData JPA Repository的支持</p><p>@EnableTransactionManagement 开启注解式事务的支持</p><p>@EnableTransactionManagement 开启注解式事务的支持</p><p>@EnableCaching 开启注解式的缓存支持</p><p><strong>11、测试相关注解</strong></p><p>@RunWith 运行器，Spring中通常用于对JUnit的支持</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGzYlBica1Yoh04yOwkJRVW3ADU8oTU2jfpWibDicRFicJqEJX1ibjJadicX6YLBspyicCOphWZCxVbF6fBg/640?wx_fmt=png" alt="img"></p><p>@ContextConfiguration 用来加载配置ApplicationContext，其中classes属性用来加载配置类</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/SJm51egHPPGzYlBica1Yoh04yOwkJRVW3F7cIEbccnmklHSUh8wnLkC0eqY2aKf6QhKa7lKsSu3gTibv8GLPJ8vQ/640?wx_fmt=png" alt="img"></p><p>SpringMVC部分</p><p>@EnableWebMvc 在配置类中开启Web MVC的配置支持，如一些ViewResolver或者MessageConverter等，若无此句，重写WebMvcConfigurerAdapter方法（用于对SpringMVC的配置）。</p><p>@Controller 声明该类为SpringMVC中的Controller</p><p>@RequestMapping 用于映射Web请求，包括访问路径和参数（类或方法上）</p><p>@ResponseBody 支持将返回值放在response内，而不是一个页面，通常用户返回json数据（返回值旁或方法上）</p><p>@RequestBody 允许request的参数在request体中，而不是在直接连接在地址后面。（放在参数前）</p><p>@PathVariable 用于接收路径参数，比如@RequestMapping(“/hello/{name}”)申明的路径，将注解放在参数中前，即可获取该值，通常作为Restful的接口实现方法。</p><p>@RestController 该注解为一个组合注解，相当于@Controller和@ResponseBody的组合，注解在类上，意味着，该Controller的所有方法都默认加上了@ResponseBody。</p><p>@ControllerAdvice 通过该注解，我们可以将对于控制器的全局配置放置在同一个位置，注解了@Controller的类的方法可使用@ExceptionHandler、@InitBinder、@ModelAttribute注解到方法上，<br>这对所有注解了 @RequestMapping的控制器内的方法有效。</p><p>@ExceptionHandler 用于全局处理控制器里的异常</p><p>@InitBinder 用来设置WebDataBinder，WebDataBinder用来自动绑定前台请求参数到Model中。</p><p>@ModelAttribute 本来的作用是绑定键值对到Model里，在@ControllerAdvice中是让全局的@RequestMapping都能获得在此处设置的键值对。</p><h3 id="spring-DI的几种方式"><a href="#spring-DI的几种方式" class="headerlink" title="spring DI的几种方式"></a>spring DI的几种方式</h3><p>(1)构造器注入：通过构造方法初始化</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;constructor-arg name="dao"&lt;/constructor-arg&gt;</span><br></pre></td></tr></table></figure><p>(2)setter注入：通过setter方法初始化注入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name="dao" ref="dao2"&gt;&lt;/property&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Interview&quot;&gt;&lt;a href=&quot;#Interview&quot; class=&quot;headerlink&quot; title=&quot;Interview&quot;&gt;&lt;/a&gt;Interview&lt;/h1&gt;&lt;h2 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java-GC</title>
    <link href="http://yoursite.com/2020/02/12/java-GC/"/>
    <id>http://yoursite.com/2020/02/12/java-GC/</id>
    <published>2020-02-12T09:32:43.000Z</published>
    <updated>2020-02-13T12:42:02.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h1><h2 id="java-GC是在什么时候，对什么东西，做了什么事情？"><a href="#java-GC是在什么时候，对什么东西，做了什么事情？" class="headerlink" title="java GC是在什么时候，对什么东西，做了什么事情？"></a>java GC是在什么时候，对什么东西，做了什么事情？</h2><h3 id="什么时候："><a href="#什么时候：" class="headerlink" title="什么时候："></a>什么时候：</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>新生代有一个<strong>Eden区</strong>和<strong>两个survivor区</strong>，</p><p>首先将对象放入<strong>Eden区</strong>，如果空间不足就向其中的一个survivor区上放，</p><p>如果仍然放不下就会引发一次发生在<strong>新生代的minor GC</strong>，将存活的对象放入<strong>另一个survivor区</strong>中，，然后<strong>清空Eden和之前的那个survivor区的内存</strong>。</p><p>在某次GC过程中，如果发现仍然又放不下的对象，就将这些对象放入<strong>老年代内存</strong>里去。</p><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p><strong>大对象以及长期存活的对象</strong>直接进入<strong>老年区</strong>。</p><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><p>当每次执行minor GC的时候应该对要晋升到老年代的对象进行<strong>分析</strong>，</p><p>如果这些马上要到老年区的老年对象的<strong>大小</strong>超过了老年区的剩余大小，那么执行一次<strong>Full GC</strong>以尽可能地获得老年区的空间。</p><h3 id="对什么东西："><a href="#对什么东西：" class="headerlink" title="对什么东西："></a>对什么东西：</h3><p>从<strong>GC Roots</strong>搜索不到，而且<strong>经过一次标记清理之后仍没有复活的对象</strong>。</p><h3 id="做什么："><a href="#做什么：" class="headerlink" title="做什么："></a>做什么：</h3><p><strong>新生代</strong>：复制清理；<br><strong>老年代</strong>：标记-清除和标记-压缩算法；<br><strong>永久代</strong>：存放Java中的类和加载类的类加载器本身。</p><h3 id="GC-Roots都有哪些："><a href="#GC-Roots都有哪些：" class="headerlink" title="GC Roots都有哪些："></a>GC Roots都有哪些：</h3><ol><li>虚拟机<strong>栈中的引用</strong>的对象</li><li>方法区中<strong>静态属性</strong>引用的对象，常量引用的对象</li><li>本地方法栈中JNI（即一般说的<strong>Native</strong>方法）引用的对象。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GC&quot;&gt;&lt;a href=&quot;#GC&quot; class=&quot;headerlink&quot; title=&quot;GC&quot;&gt;&lt;/a&gt;GC&lt;/h1&gt;&lt;h2 id=&quot;java-GC是在什么时候，对什么东西，做了什么事情？&quot;&gt;&lt;a href=&quot;#java-GC是在什么时候，对什么东西，做了什么事情</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>哈希表和红黑树</title>
    <link href="http://yoursite.com/2020/02/02/%E5%93%88%E5%B8%8C%E8%A1%A8%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://yoursite.com/2020/02/02/%E5%93%88%E5%B8%8C%E8%A1%A8%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91/</id>
    <published>2020-02-02T10:07:09.000Z</published>
    <updated>2020-02-03T06:37:19.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一个一个查找key困难，所以有了hash算法加快查找。</p><p><strong>哈希表</strong>（Hash table，也叫散列表），是根据<strong>键值(Key)</strong>而直接进行访问的数据结构。也就是说，它通过把键值<strong>映射</strong>到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做<strong>散列函数</strong>，存放记录的数组叫做<strong>散列表</strong>。</p><p>散列技术：</p><p>关键词(key)    —&gt;   对应关系f(key)   —&gt;   存储位置</p><h2 id="构造散列函数方法"><a href="#构造散列函数方法" class="headerlink" title="构造散列函数方法"></a>构造散列函数方法</h2><h3 id="除留余数法"><a href="#除留余数法" class="headerlink" title="除留余数法"></a>除留余数法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(key) = <span class="function">key mod <span class="title">p</span><span class="params">(p≤m)</span></span></span><br><span class="line"><span class="function"><span class="comment">//**散列表长为m;</span></span></span><br><span class="line"><span class="function"><span class="comment">//通常p为小于或等于表长（最好接近m）的最小质数或不包含小于20质因子的合数。</span></span></span><br></pre></td></tr></table></figure><p>一般的m取值尽量不要接近2的整数幂，而且还要是质数。</p><p>因为：</p><p>（1）p = 2key时，也即是说只要奇数槽和0槽被占用，其他的偶数槽都是浪费掉了。</p><p>（2）p = 2^r时，造成的后果是某一个槽有很多的关键字。</p><h4 id="处理冲突和溢出"><a href="#处理冲突和溢出" class="headerlink" title="处理冲突和溢出"></a>处理冲突和溢出</h4><p>不希望发生冲突但冲突发生的可能性还是存在：</p><p>当关键字的实际取值大于哈希表的长度时，表中装满记录插入一个时，不仅会冲突还会溢出。</p><p>因此，处理冲突和溢出是哈希技术中的两个重要问题。一般有<strong>开放地址法</strong>、<strong>链地址法</strong>。    </p><h3 id="链地址法"><a href="#链地址法" class="headerlink" title="链地址法"></a>链地址法</h3><p>将所有关键字为同义词的记录存储在一个单链表中，这种链表叫做同义词子表，使用除留余数法，就不存在冲突的问题了，只是在链表中增加一个结点。</p><h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p><font color="#ff0000"> Red-Black Tree</font>，又称为“红黑树”，它一种特殊的二叉查找树。红黑树的每个节点上都<strong>有存储位表示节点的颜色</strong>，可以是红(Red)或黑(Black)。红黑树的应用比较广泛，主要是用它来<strong>存储有序的数据</strong>，它的时间复杂度是<strong>O(lgn)</strong><font color="#ff0000"><strong>（二叉树最大查找次数等于树的深度）</strong></font>，效率非常之高。</p><p>例如，Java集合中的<a href="http://www.cnblogs.com/skywang12345/p/3311268.html" target="_blank" rel="noopener">TreeSet</a>和<a href="http://www.cnblogs.com/skywang12345/p/3310928.html" target="_blank" rel="noopener">TreeMap</a>，C++ STL中的set、map，以及Linux虚拟内存的管理，都是通过红黑树去实现的。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p><strong>红黑树的特性</strong>:<br><strong>（1）每个节点或者是黑色，或者是红色。</strong><br><strong>（2）根节点是黑色。</strong><br><strong>（3）<font color="#00f">每个叶节点是黑色</font>。 [注意：这里叶节点，是指<font color="#00f">为空(NIL或NULL)的叶子节点</font>！]</strong><br><strong>（4）如果一个节点是红色的，则它的子节点必须是黑色的，</strong>红色节点的孩子和父亲都不能是红色<strong>。</strong><br><strong>（5）任意一结点到每个叶子结点的路径都包含<font color="#00f">数量相同</font>的黑结点。</strong></p><p><strong><font color="#ff0000">注意</font></strong>：特性(3)中的叶子节点，是只为空(NIL或null)的节点。<br>           特性(5)，确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对接近平衡的二叉树，并不是一个完美平衡二叉查找树。红黑树示意图如下：</p><p><img src="https://i.loli.net/2020/02/03/4hCZ31YPz8Ubyja.jpg" alt="error"></p><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p> 需要通过调整使得查找树重新满足红黑树的条件。</p><p>调整可以分为两类：一类是颜色调整，即改变某个节点的颜色；另一类是结构调整，集改变检索树的结构关系。</p><p>结构调整过程包含两个基本操作：<strong>左旋（Rotate Left），右旋（RotateRight）</strong>。</p><p><strong>左旋过程示例：</strong></p><p><img src="https://i.loli.net/2020/02/03/3r1UuG9FeWxPsdD.png" alt="error"></p><p><strong>右旋过程示例：</strong></p><p><img src="https://i.loli.net/2020/02/03/59SrPK7LF3nMhi2.png" alt="error"></p><h2 id="变色"><a href="#变色" class="headerlink" title="变色"></a>变色</h2><p>首先，节点变色；</p><p>其次，<strong>处理策略</strong><br>(01) 将“父节点”作为“新的当前节点”。<br>(02) 以“新的当前节点”为支点进行左旋。</p><p>等方式使红黑树处于平衡状态。</p><p>关键要懂得红黑树自平衡调整的主体思想。</p><h2 id="Hash与红黑树的区别："><a href="#Hash与红黑树的区别：" class="headerlink" title="Hash与红黑树的区别："></a>Hash与红黑树的区别：</h2><p>权衡三个因素: 查找速度, 数据量, 内存使用，可扩展性，有序性。</p><p>​     hash查找速度会比RB树快，而且查找速度基本和数据量大小无关，属于常数级别;而RB树的查找速度是log(n)级别。并不一定常数就比log(n) 小，因为hash还有hash函数的耗时。当元素达到一定数量级时，考虑hash。但若你对内存使用特别严格， 希望程序尽可能少消耗内存，那么hash可能会让你陷入尴尬，特别是当你的hash对象特别多时，你就更无法控制了，而且 hash的构造速度较慢。</p><ol><li>红黑树是有序的，Hash是无序的，根据需求来选择。</li><li>红黑树占用的内存更小（仅需要为其存在的节点分配内存），而Hash事先应该分配足够的内存存储散列表,即使有些槽可能弃用</li><li>红黑树查找和删除的时间复杂度都是O(logn)，Hash查找和删除的时间复杂度都是O(1)。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;哈希表&quot;&gt;&lt;a href=&quot;#哈希表&quot; class=&quot;headerlink&quot; title=&quot;哈希表&quot;&gt;&lt;/a&gt;哈希表&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    
    <category term="HashMap查找算法" scheme="http://yoursite.com/tags/HashMap查找算法/"/>
    
  </entry>
  
  <entry>
    <title>HashMap和HashTable的区别</title>
    <link href="http://yoursite.com/2020/02/01/HashMap%E5%92%8CHashTable%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2020/02/01/HashMap%E5%92%8CHashTable%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-01T05:26:45.000Z</published>
    <updated>2021-06-06T14:12:03.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><h2 id="HashMap简介"><a href="#HashMap简介" class="headerlink" title="HashMap简介"></a>HashMap简介</h2><p>主要有以下内容: </p><p>1、HashMap数据结构介绍</p><p>2、HashMap重要属性介绍</p><p>3、数据的存储、插入过程以及查找过程</p><p>4、问题处理。</p><p><font color="#ff0000"><strong>HashMap implement  Serializable，Cloneable</strong></font></p><p>HashMap 的继承图：</p><p><img src="https://i.loli.net/2020/02/03/NfE9lZkgFevsXd3.png" alt="error"></p><p>HashMap 根据键的 <strong>hashCode 值存储数据</strong>，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序却是不确定的。 </p><p> HashMap 最多只允许一条记录的键为 <strong>null</strong> ，允许多条记录的值为 null 。</p><p>HashMap <strong>非线程安全</strong>，即任一时刻可以有多个线程同时写 HashMap，可能会导致数据的不一致。如果需要满足线程安全，可以用 <strong>Collections的synchronizedMap 方法</strong>使 HashMap 具有线程安全的能力，或者使用<strong>ConcurrentHashMap</strong>。</p><h3 id="HashMap数据结构"><a href="#HashMap数据结构" class="headerlink" title="HashMap数据结构"></a>HashMap数据结构</h3><p><strong>结构：</strong></p><p>HashMap是由数组和链表结构组成。</p><p>而hashMap在jdk 1.8的结构，用的是<font color="#00f"><strong>数组+链表+红黑树</strong></font>的结构，也叫哈希桶。</p><p><strong>HashMap的旧存储结构：</strong></p><p><img src="https://i.loli.net/2020/02/01/wIoG4atzlZP5uOR.png" alt="error"></p><p><strong>HashMap的新存储结构：</strong></p><p><img src="https://i.loli.net/2020/02/03/MX9DRLtb6A1CcuG.png" alt="error"></p><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><p><strong>1.数组和链表结构组成两个好处：</strong></p><p>1、查找比纯链表快，插入删除比纯数组快；</p><p>2、可以解决HashCode冲突。</p><p><font color="#ff0000"><strong>改进后：</strong></font></p><p>因为在链表的查询操作都是O(N)的时间复杂度，而且hashMap中查询操作也是占了很大比例的，如果当节点数量多，转换为红黑树结构，那么将会提高很大的效率，因为红黑树结构中，增删改查都是O(log n)。</p><h3 id="HashMap重要成员变量介绍"><a href="#HashMap重要成员变量介绍" class="headerlink" title="HashMap重要成员变量介绍"></a>HashMap重要成员变量介绍</h3><h4 id="各常量、成员变量作用："><a href="#各常量、成员变量作用：" class="headerlink" title="各常量、成员变量作用："></a>各常量、成员变量作用：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//序列号，序列化的时候使用。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br><span class="line">    <span class="comment">/**默认容量，1向左移位4个，00000001变成00010000，也就是2的4次方为16，使用移位是因为移位是计算机基础运算，效率比加减乘除快。**/</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line">    <span class="comment">//最大容量，2的30次方。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">    <span class="comment">//加载因子，用于扩容使用。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line">    <span class="comment">//当某个桶节点数量大于8时，会转换为红黑树。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">//当某个桶节点数量小于6时，会转换为链表，前提是它当前是红黑树结构。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">//当整个hashMap中元素数量大于64时，也会进行转为红黑树结构。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//存储元素的数组，transient关键字表示该属性不能被序列化</span></span><br><span class="line"><span class="comment">//保存Node&lt;K,V&gt;节点的数组</span></span><br><span class="line">   <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line">   <span class="comment">//将数据转换成set的另一种存储形式，这个变量主要用于迭代功能。</span></span><br><span class="line"><span class="comment">//由　hashMap 中 Node&lt;K,V&gt;　节点构成的 set</span></span><br><span class="line">   <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line">   <span class="comment">//记录 hashMap 当前存储的元素的数量</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line">   <span class="comment">//记录　hashMap 发生结构性变化的次数（注意　value 的覆盖不属于结构性变化）</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line">   <span class="comment">//临界值，也就是元素数量达到临界值时，会进行扩容。</span></span><br><span class="line"><span class="comment">//threshold的值应等于 table.length * loadFactor, size 超过这个值时进行　resize()扩容</span></span><br><span class="line">   <span class="keyword">int</span> threshold;</span><br><span class="line">   <span class="comment">//也是加载因子，只不过这个是变量。</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure><p><strong>常见参数初始大小：</strong></p><p>Table长度初始大小16<br>loadFactor负载因子为0.75</p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>使用静态内部类，是为了方便调用，而不用每次调用里面的属性或者方法都需要new一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TreeNode&lt;K,V&gt; 继承 LinkedHashMap.Entry&lt;K,V&gt;，用来实现红黑树相关的存储结构</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; parent;<span class="comment">// 存储当前节点的父节点 </span></span><br><span class="line">        TreeNode&lt;K,V&gt; left;<span class="comment">//存储当前节点的左孩子</span></span><br><span class="line">        TreeNode&lt;K,V&gt; right;<span class="comment">//存储当前节点的右孩子</span></span><br><span class="line">        TreeNode&lt;K,V&gt; prev; <span class="comment">// 存储当前节点的前一个节点   </span></span><br><span class="line">        <span class="keyword">boolean</span> red;<span class="comment">// 存储当前节点的颜色（红、黑）</span></span><br><span class="line">        TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node&lt;K,V&gt; 类用来实现数组及链表的数据结构</span></span><br><span class="line"> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;<span class="comment">//保存节点的 hash　值</span></span><br><span class="line">        <span class="keyword">final</span> K key;<span class="comment">//保存节点的　key　值</span></span><br><span class="line">        V value;<span class="comment">//保存节点的　value 值</span></span><br><span class="line">        Node&lt;K,V&gt; next;<span class="comment">//指向链表结构下的当前节点的　next 节点，红黑树　TreeNode　节点中也有用到</span></span><br><span class="line"> </span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>上面这两个内部类再加上之前的Node&lt;K,V&gt;[] table属性，组成了hashMap的结构，哈希桶。</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>一共有3个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//空参构造，使用默认的加载因子0.75；</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//设置初始容量，并使用默认的加载因子；</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//设置初始容量和加载因子</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="comment">/* tableSizeFor(initialCapacity)　方法返回的值是最接近 initialCapacity 的2的幂，若指定初始容量为９，则实际 hashMap 容量为16*/</span></span><br><span class="line">        <span class="comment">//注意此种方法创建的 hashMap 初始容量的值存在　threshold 中</span></span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后一个构造函数, 该构造函数，传入一个Map，然后把该Map转为hashMap,。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">       putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//获取该map的实际长度</span></span><br><span class="line">       <span class="keyword">int</span> s = m.size();</span><br><span class="line">       <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">//判断table是否初始化，如果没有初始化</span></span><br><span class="line">           <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">               <span class="comment">/**求出需要的容量，因为实际使用的长度=容量*0.75得来的，+1是因为小数相除，基本都不会是整数，容量大小不能为小数的，后面转换为int，多余的小数就要被丢掉，所以+1，例如，map实际长度22，22/0.75=29.3,所需要的容量肯定为30，有人会问如果刚刚好除得整数呢，除得整数的话，容量大小多1也没什么影响**/</span></span><br><span class="line">               <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">               <span class="comment">//判断该容量大小是否超出上限。</span></span><br><span class="line">               <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                        (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">               <span class="comment">/**对临界值进行初始化，tableSizeFor(t)这个方法会返回大于t值的，且离其最近的2次幂，例如t为29，则返回的值是32**/</span></span><br><span class="line">               <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                   threshold = tableSizeFor(t);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//如果table已经初始化，则进行扩容操作，resize()就是扩容。</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">               resize();</span><br><span class="line">           <span class="comment">//遍历，把map中的数据转到hashMap中。</span></span><br><span class="line">           <span class="comment">//因为效率高所以采用这个遍历方法</span></span><br><span class="line">           <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">               K key = e.getKey();</span><br><span class="line">               V value = e.getValue();</span><br><span class="line">               putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="问题：-1"><a href="#问题：-1" class="headerlink" title="问题："></a>问题：</h4><p><strong>1.为什么默认容量大小为16，加载因子为0.75？</strong></p><p>这两个常量的值都是经过大量的计算和统计得出来的最优解。</p><p><strong>2.为什么table的长度通常为2的倍数</strong></p><p>为2的倍数与index的计算有关，能够减少index的冲突。<br>table 长度为2的倍数那 长度减1 后用二进制表示就全为1；这样做与运算取决于Hashcode的后几位<br>table  length  为16<br>0100 &amp;1111=4<br>0110&amp;1111=6<br>0111&amp;1111=7<br>table length 为6<br>0100&amp;0101=4<br>0110&amp;0101=4<br>0111&amp;0101=5</p><p><strong>3、扩容</strong></p><p>3.1、新申请两倍的数组大小<br>3.2、重新计算index，并放入新的数组中</p><p>扩容是是新建了一个HashMap的底层数组，而后调用transfer方法，将就HashMap的全部元素添加到新的HashMap中（要重新计算元素在新的数组中的索引位置）。 很明显，扩容是一个相当耗时的操作，因为它需要重新计算这些元素在新的数组中的位置并进行复制处理。因此，我们在用HashMap的时，最好能提前预估下HashMap中元素的个数，这样有助于提高HashMap的性能。</p><p><strong>4、假设hashcode冲突，100个数据需要将HashMap初始为多大比较合适</strong></p><p>这个主要考虑table的长度和负载因子及扩容<br>table长度为2的倍数，那128比较合适但128*0.75=96。小于100因此还是需要扩容。所以应该取256。</p><p><strong>5、key值和value值是否可以为null</strong></p><p>key和value值都可以为null。</p><h3 id="HashMap存数据的过程："><a href="#HashMap存数据的过程：" class="headerlink" title="HashMap存数据的过程："></a>HashMap存数据的过程：</h3><p>HashMap内部维护了一个存储数据的<em>Entry数组</em>，HashMap采用链表解决冲突，每一个Entry本质上是一个单向链表。</p><p>当准备添加一个<em>key-value对</em>时，</p><p>首先通过<em>hash（key）</em>方法计算hash值，</p><p>然后通过<em>indexFor(Hash,length)</em>求该key-value的存储位置，</p><p>计算方法是先用<em>hash&amp;0x7FFFFFFF</em>后，再对<em>length取模</em>，这就能保证每一个key-value对都能存储到HashMap中，当计算出位置相同时，由于存入位置是一个链表，则把这个key-value对插入链表头。而当链表长度太长时，链表就转换为红黑树，这样大大提高了查找的效率。</p><h3 id="HashMap的增删改查操作及常用的方法"><a href="#HashMap的增删改查操作及常用的方法" class="headerlink" title="HashMap的增删改查操作及常用的方法"></a>HashMap的增删改查操作及常用的方法</h3><h4 id="添加元素："><a href="#添加元素：" class="headerlink" title="添加元素："></a>添加元素：</h4><p>hash方法计算哈希值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">/**先获取到key的hashCode，然后进行移位再进行异或运算，为什么这么复杂，不用想肯定是为了减少hash冲突**/</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>put方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**四个参数，第一个hash值，第四个参数表示如果该key存在值，如果为null的话，则插入新的value，最后一个参数，在hashMap中没有用，可以不用管，使用默认的即可**/</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//tab 哈希数组，p 该哈希桶的首节点，n hashMap的长度，i 计算出的数组下标</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">//获取长度并进行扩容，使用的是懒加载，table一开始是没有加载的，等put后才开始加载</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">/**如果计算出的该哈希桶的位置没有值，则把新插入的key-value放到此处，此处就算没有插入成功，也就是发生哈希冲突时也会把哈希桶的首节点赋予p**/</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//发生哈希冲突的几种情况</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// e 临时节点的作用， k 存放该当前节点的key </span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">//第一种，插入的key-value的hash值，key都与当前节点的相等，e = p，则表示为首节点</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">//第二种，hash值不等于首节点，判断该p是否属于红黑树的节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">/**为红黑树的节点，则在红黑树中进行添加，如果该节点已经存在，则返回该节点（不为null），该值很重要，用来判断put操作是否成功，如果添加成功返回null**/</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">//第三种，hash值不等于首节点，不为红黑树的节点，则为链表的节点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//遍历该链表</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">//如果找到尾部，则表明添加的key-value没有重复，在尾部进行添加</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">//判断是否要转换为红黑树结构</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) </span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果链表中有重复的key，e则为当前重复的节点，结束循环</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//有重复的key，则用待插入值进行覆盖，返回旧值。</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; </span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//到了此步骤，则表明待插入的key-value是没有key的重复，因为插入成功e节点的值为null</span></span><br><span class="line">    <span class="comment">//修改次数+1</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">//实际长度+1，判断是否大于临界值，大于则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="comment">//添加成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*读懂这个函数要注意理解 hash 冲突发生的几种情况</span></span><br><span class="line"><span class="comment">   １、两节点　key 值相同（hash值一定相同），导致冲突</span></span><br><span class="line"><span class="comment">   ２、两节点　key 值不同，由于 hash 函数的局限性导致hash 值相同，冲突</span></span><br><span class="line"><span class="comment">　　 　　 ３、两节点　key 值不同，hash 值不同，但 hash 值对数组长度取模后相同，冲突</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">putTreeVal</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> h, K k, V v)</span> </span>&#123;</span><br><span class="line">       Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">boolean</span> searched = <span class="keyword">false</span>;</span><br><span class="line">      TreeNode&lt;K,V&gt; root = (parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>;</span><br><span class="line">　　　　　　　 <span class="comment">//从根节点开始查找合适的插入位置（与二叉搜索树查找过程相同）</span></span><br><span class="line">       <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">           <span class="keyword">int</span> dir, ph; K pk;</span><br><span class="line">           <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">               dir = -<span class="number">1</span>;　<span class="comment">//　dir小于０，接下来查找当前节点左孩子</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">               dir = <span class="number">1</span>;　<span class="comment">//　dir大于０，接下来查找当前节点右孩子</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (pk != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line"> 　　　　　　　　　　　　<span class="comment">//进入这个else if 代表　hash 值相同，key　相同</span></span><br><span class="line">               <span class="keyword">return</span> p;</span><br><span class="line"> 　　　　 　　　　 <span class="comment">/*要进入下面这个else if,代表有以下几个含义:</span></span><br><span class="line"><span class="comment">             1、当前节点与待插入节点　key　不同,　hash 值相同</span></span><br><span class="line"><span class="comment">     　　　　　　　　2、ｋ是不可比较的，即ｋ并未实现　comparable&lt;K&gt;　接口</span></span><br><span class="line"><span class="comment">　　　　　　　　　　　　　　（若 k 实现了comparable&lt;K&gt;　接口，comparableClassFor（k）返回的是ｋ的　class,而不是　null）</span></span><br><span class="line"><span class="comment">           　　或者　compareComparables(kc, k, pk)　返回值为 0</span></span><br><span class="line"><span class="comment">　　　　　　　　　　　　　　(pk 为空　或者　按照 k.compareTo(pk) 返回值为０，</span></span><br><span class="line"><span class="comment">　　　　　　　　　　　　　　返回值为０可能是由于　ｋ的compareTo 方法实现不当引起的，compareTo 判定相等，而上个 else if　中　equals 判定不等)*/</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                     (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                    (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="comment">//在以当前节点为根的整个树上搜索是否存在待插入节点（只会搜索一次）</span></span><br><span class="line">               <span class="keyword">if</span> (!searched) &#123;</span><br><span class="line">                   TreeNode&lt;K,V&gt; q, ch;</span><br><span class="line">                   searched = <span class="keyword">true</span>;</span><br><span class="line">                   <span class="keyword">if</span> (((ch = p.left) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        (q = ch.find(h, k, kc)) != <span class="keyword">null</span>) ||</span><br><span class="line">                       ((ch = p.right) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        (q = ch.find(h, k, kc)) != <span class="keyword">null</span>))</span><br><span class="line"> 　　　　　　　　　　　　　　　　　<span class="comment">//若树中存在待插入节点，直接返回</span></span><br><span class="line">                       <span class="keyword">return</span> q;</span><br><span class="line">               &#125;</span><br><span class="line"> 　　　　　 　　　　　　 <span class="comment">// 既然ｋ是不可比较的，那我自己指定一个比较方式</span></span><br><span class="line">               dir = tieBreakOrder(k, pk);</span><br><span class="line">           &#125;<span class="comment">//end else if</span></span><br><span class="line"> </span><br><span class="line">           TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">           <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line"> 　　　　　　　　　　　　<span class="comment">//找到了待插入的位置，xp 为待插入节点的父节点</span></span><br><span class="line"> 　　　　　　　　　　　　<span class="comment">//注意TreeNode节点中既存在树状关系，也存在链式关系，并且是双端链表</span></span><br><span class="line">               Node&lt;K,V&gt; xpn = xp.next;</span><br><span class="line">               TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);</span><br><span class="line">               <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                   xp.left = x;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   xp.right = x;</span><br><span class="line">               xp.next = x;</span><br><span class="line">               x.parent = x.prev = xp;</span><br><span class="line">               <span class="keyword">if</span> (xpn != <span class="keyword">null</span>)</span><br><span class="line">                   ((TreeNode&lt;K,V&gt;)xpn).prev = x;</span><br><span class="line"> 　　　　　　　　　　　　<span class="comment">//插入节点后进行二叉树的平衡操作</span></span><br><span class="line">               moveRootToFront(tab, balanceInsertion(root, x));</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;<span class="comment">//end for</span></span><br><span class="line">   &#125;<span class="comment">//end putTreeVal    　</span></span><br><span class="line"> 　　</span><br><span class="line"> 　　 　　<span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tieBreakOrder</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> d;</span><br><span class="line">       <span class="comment">//System.identityHashCode()实际是利用对象 a,b 的内存地址进行比较</span></span><br><span class="line">       <span class="keyword">if</span> (a == <span class="keyword">null</span> || b == <span class="keyword">null</span> ||</span><br><span class="line">           (d = a.getClass().getName().</span><br><span class="line">            compareTo(b.getClass().getName())) == <span class="number">0</span>)</span><br><span class="line">           d = (System.identityHashCode(a) &lt;= System.identityHashCode(b) ?</span><br><span class="line">                -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> d;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="扩容方法"><a href="#扩容方法" class="headerlink" title="扩容方法"></a>扩容方法</h4><p>扩容方法resize。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">     <span class="comment">//把没插入之前的哈希数组做我诶oldTal</span></span><br><span class="line">     Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">     <span class="comment">//old的长度</span></span><br><span class="line">     <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">     <span class="comment">//old的临界值</span></span><br><span class="line">     <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">     <span class="comment">//初始化new的长度和临界值</span></span><br><span class="line">     <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">     <span class="comment">//oldCap &gt; 0也就是说不是首次初始化，因为hashMap用的是懒加载</span></span><br><span class="line">     <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">//大于最大值</span></span><br><span class="line">         <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">             <span class="comment">//临界值为整数的最大值</span></span><br><span class="line">             threshold = Integer.MAX_VALUE;</span><br><span class="line">             <span class="keyword">return</span> oldTab;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//标记##，其它情况，扩容两倍，并且扩容后的长度要小于最大值，old长度也要大于16</span></span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                  oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">             <span class="comment">//临界值也扩容为old的临界值2倍</span></span><br><span class="line">             newThr = oldThr &lt;&lt; <span class="number">1</span>; </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/**如果oldCap&lt;0，但是已经初始化了，像把元素删除完之后的情况，那么它的临界值肯定还存在，        </span></span><br><span class="line"><span class="comment">        如果是首次初始化，它的临界值则为0</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) </span><br><span class="line">         newCap = oldThr;</span><br><span class="line">     <span class="comment">//首次初始化，给与默认的值</span></span><br><span class="line">     <span class="keyword">else</span> &#123;               </span><br><span class="line">         newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">         <span class="comment">//临界值等于容量*加载因子</span></span><br><span class="line">         newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//此处的if为上面标记##的补充，也就是初始化时容量小于默认值16的，此时newThr没有赋值</span></span><br><span class="line">     <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">//new的临界值</span></span><br><span class="line">         <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">         <span class="comment">//判断是否new容量是否大于最大值，临界值是否大于最大值</span></span><br><span class="line">         newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                   (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//把上面各种情况分析出的临界值，在此处真正进行改变，也就是容量和临界值都改变了。</span></span><br><span class="line">     threshold = newThr;</span><br><span class="line">     <span class="comment">//表示忽略该警告</span></span><br><span class="line">     <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">         <span class="comment">//初始化</span></span><br><span class="line">         Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">     <span class="comment">//赋予当前的table</span></span><br><span class="line">     table = newTab;</span><br><span class="line">     <span class="comment">//此处自然是把old中的元素，遍历到new中</span></span><br><span class="line">     <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">             <span class="comment">//临时变量</span></span><br><span class="line">             Node&lt;K,V&gt; e;</span><br><span class="line">             <span class="comment">//当前哈希桶的位置值不为null，也就是数组下标处有值，因为有值表示可能会发生冲突</span></span><br><span class="line">             <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 <span class="comment">//把已经赋值之后的变量置位null，当然是为了好回收，释放内存</span></span><br><span class="line">                 oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                 <span class="comment">//如果下标处的节点没有下一个元素</span></span><br><span class="line">                 <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                     <span class="comment">//把该变量的值存入newCap中，e.hash &amp; (newCap - 1)并不等于j</span></span><br><span class="line">                     newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                 <span class="comment">//该节点为红黑树结构，也就是存在哈希冲突，该哈希桶中有多个元素</span></span><br><span class="line">                 <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                     <span class="comment">//把此树进行转移到newCap中</span></span><br><span class="line">                     ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                 <span class="keyword">else</span> &#123; <span class="comment">/**此处表示为链表结构，同样把链表转移到newCap中，就是把链表遍历后，把值转过去，在置位null**/</span></span><br><span class="line">                     Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                     Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                     Node&lt;K,V&gt; next;</span><br><span class="line">                     <span class="keyword">do</span> &#123;</span><br><span class="line">                         next = e.next;</span><br><span class="line">                         <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                             <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                 loHead = e;</span><br><span class="line">                             <span class="keyword">else</span></span><br><span class="line">                                 loTail.next = e;</span><br><span class="line">                             loTail = e;</span><br><span class="line">                         &#125;</span><br><span class="line">                         <span class="keyword">else</span> &#123;</span><br><span class="line">                             <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                 hiHead = e;</span><br><span class="line">                             <span class="keyword">else</span></span><br><span class="line">                                 hiTail.next = e;</span><br><span class="line">                             hiTail = e;</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                     <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                         loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                         newTab[j] = loHead;</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                         hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                         newTab[j + oldCap] = hiHead;</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//返回扩容后的hashMap</span></span><br><span class="line">     <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除元素："><a href="#删除元素：" class="headerlink" title="删除元素："></a>删除元素：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//临时变量</span></span><br><span class="line">     Node&lt;K,V&gt; e;</span><br><span class="line">     <span class="comment">/**调用removeNode(hash(key), key, null, false, true)进行删除，第三个value为null，表示，把key的节点直接都删除了，不需要用到值，如果设为值，则还需要去进行查找操作**/</span></span><br><span class="line">     <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">         <span class="keyword">null</span> : e.value;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**第一参数为哈希值，第二个为key，第三个value，第四个为是为true的话，则表示删除它key对应的value，不删除key,第四个如果为false，则表示删除后，不移动节点**/</span></span><br><span class="line"> <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//tab 哈希数组，p 数组下标的节点，n 长度，index 当前数组下标</span></span><br><span class="line">     Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line">     <span class="comment">//哈希数组不为null，且长度大于0，然后获得到要删除key的节点所在是数组下标位置</span></span><br><span class="line">     <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">         (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//nodee 存储要删除的节点，e 临时变量，k 当前节点的key，v 当前节点的value</span></span><br><span class="line">         Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">         <span class="comment">//如果数组下标的节点正好是要删除的节点，把值赋给临时变量node</span></span><br><span class="line">         <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">             ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">             node = p;</span><br><span class="line">         <span class="comment">//也就是要删除的节点，在链表或者红黑树上，先判断是否为红黑树的节点</span></span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                 <span class="comment">//遍历红黑树，找到该节点并返回</span></span><br><span class="line">                 node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">             <span class="keyword">else</span> &#123; <span class="comment">//表示为链表节点，一样的遍历找到该节点</span></span><br><span class="line">                 <span class="keyword">do</span> &#123;</span><br><span class="line">                     <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                         ((k = e.key) == key ||</span><br><span class="line">                          (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                         node = e;</span><br><span class="line">                         <span class="keyword">break</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="comment">/**注意，如果进入了链表中的遍历，那么此处的p不再是数组下标的节点，而是要删除结点的上一个结点**/</span></span><br><span class="line">                     p = e;</span><br><span class="line">                 &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//找到要删除的节点后，判断!matchValue，我们正常的remove删除，!matchValue都为true</span></span><br><span class="line">         <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                              (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">             <span class="comment">//如果删除的节点是红黑树结构，则去红黑树中删除</span></span><br><span class="line">             <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                 ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">             <span class="comment">//如果是链表结构，且删除的节点为数组下标节点，也就是头结点，直接让下一个作为头</span></span><br><span class="line">             <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                 tab[index] = node.next;</span><br><span class="line">             <span class="keyword">else</span> <span class="comment">/**为链表结构，删除的节点在链表中，把要删除的下一个结点设为上一个结点的下一个节点**/</span></span><br><span class="line">                 p.next = node.next;</span><br><span class="line">             <span class="comment">//修改计数器</span></span><br><span class="line">             ++modCount;</span><br><span class="line">             <span class="comment">//长度减一</span></span><br><span class="line">             --size;</span><br><span class="line">             <span class="comment">/**此方法在hashMap中是为了让子类去实现，主要是对删除结点后的链表关系进行处理**/</span></span><br><span class="line">             afterNodeRemoval(node);</span><br><span class="line">             <span class="comment">//返回删除的节点</span></span><br><span class="line">             <span class="keyword">return</span> node;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//返回null则表示没有该节点，删除失败</span></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 删除还有clear方法，把所有的数组下标元素都置位null.</p><h4 id="获取元素："><a href="#获取元素：" class="headerlink" title="获取元素："></a>获取元素：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">     Node&lt;K,V&gt; e;</span><br><span class="line">     <span class="comment">//也是调用getNode方法来完成的</span></span><br><span class="line">     <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//first 头结点，e 临时变量，n 长度,k key</span></span><br><span class="line">     Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">     <span class="comment">//头结点也就是数组下标的节点</span></span><br><span class="line">     <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">         (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//如果是头结点，则直接返回头结点</span></span><br><span class="line">         <span class="keyword">if</span> (first.hash == hash &amp;&amp; </span><br><span class="line">             ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">             <span class="keyword">return</span> first;</span><br><span class="line">         <span class="comment">//不是头结点</span></span><br><span class="line">         <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="comment">//判断是否是红黑树结构</span></span><br><span class="line">             <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                 <span class="comment">//去红黑树中找，然后返回</span></span><br><span class="line">                 <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">             <span class="keyword">do</span> &#123; <span class="comment">//链表节点，一样遍历链表，找到该节点并返回</span></span><br><span class="line">                 <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                     ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                     <span class="keyword">return</span> e;</span><br><span class="line">             &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//找不到，表示不存在该节点</span></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">getTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line"> 　　　　　　　　<span class="comment">//从根节点开始，调用 find 方法进行查找</span></span><br><span class="line">    <span class="keyword">return</span> ((parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>).find(h, k, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"> 　</span><br><span class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> ph, dir; K pk;</span><br><span class="line">        TreeNode&lt;K,V&gt; pl = p.left, pr = p.right, q;</span><br><span class="line"> 　　　　　　　　　<span class="comment">//首先进行hash 值的比较，若不同令当前节点变为它的左孩子或者右孩子</span></span><br><span class="line">        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">            p = pl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">            p = pr;</span><br><span class="line"> 　　　　　　　　　<span class="comment">//hash 值相同，进行 key　值的比较 </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</span><br><span class="line">            p = pr;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</span><br><span class="line">            p = pl;</span><br><span class="line"> 　　　　　　　　　<span class="comment">//执行到这儿，意味着hash 值相同，key 值不同 </span></span><br><span class="line">    　　　　　　　　<span class="comment">//若k 是可比较的并且k.compareTo(pk) 返回结果不为０可进入下面elseif   </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</span><br><span class="line">                  (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">                 (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">            p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">        <span class="comment">/*若 k 是不可比较的　或者　k.compareTo(pk) 返回结果为０则在整棵树中进行查找，先找右子树，右子树没有再找左子树*/</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.find(h, k, kc)) != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> q;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = pl;</span><br><span class="line">    &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改元素："><a href="#修改元素：" class="headerlink" title="修改元素："></a>修改元素：</h4><p>元素的修改也是put方法，因为key是唯一的，所以修改元素，是把新值覆盖旧值。</p><h3 id="HashMap工作原理"><a href="#HashMap工作原理" class="headerlink" title="HashMap工作原理"></a>HashMap工作原理</h3><p>HashMap基于hashing原理；</p><p>通过put()和get()方法储存和获取对象。</p><p>当将键值对传递给put()方法时，它调用键对象的<strong>hashCode()方法</strong>来计算hashcode，然后找到bucket位置来储存值对象；</p><p>当获取对象时，通过键对象的<strong>equals()方法</strong>找到正确的键值对，然后返回值对象。</p><p>链表和红黑树来解决碰撞问题。</p><p>HashMap在每个链表节点中储存键值对对象。</p><h1 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h1><h2 id="HashTable简介"><a href="#HashTable简介" class="headerlink" title="HashTable简介"></a>HashTable简介</h2><p>Hashtable同样是基于哈希表实现的，同样每个元素是一个key-value对，其内部也是通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。</p><p>​      Hashtable也是JDK1.0引入的类，是<strong>线程安全</strong>的，能用于<strong>多线程环境</strong>中。</p><p>​      Hashtable同样实现了<strong>Serializable接口</strong>，它支持序列化，实现了<strong>Cloneable接口</strong>，能被克隆。</p><h1 id="HashMap和HashTable的区别"><a href="#HashMap和HashTable的区别" class="headerlink" title="HashMap和HashTable的区别"></a>HashMap和HashTable的区别</h1><p>主要的区别有：<strong>线程安全性</strong>，<strong>同步(synchronization)</strong>，以及<strong>速度</strong>。</p><h2 id="1-继承的父类不同"><a href="#1-继承的父类不同" class="headerlink" title="1.继承的父类不同"></a>1.继承的父类不同</h2><p>Hashtable继承自Dictionary类，而HashMap继承自AbstractMap类。但二者都实现了Map接口。</p><h2 id="2-线程安全性不同"><a href="#2-线程安全性不同" class="headerlink" title="2.线程安全性不同"></a>2.线程安全性不同</h2><p>HashMap几乎可以等价于Hashtable。</p><p>HashMap是非synchronized的，并可以接受null(HashMap可以接受为null的键值(key)和值(value)，而Hashtable则不行)；</p><p>Hashtable是synchronized，多线程且线程安全，Java 5提供了ConcurrentHashMap，它是HashTable的替代，比HashTable的扩展性更好。。</p><p><font color="#00f">Hashtable 线程安全，因为它每个方法中都加入了Synchronize。分析一下HashMap为什么是线程不安全的：</font></p><p>HashMap底层是一个Entry数组，当发生<strong>hash冲突</strong>的时候，hashmap是采用<strong>链表</strong>的方式来解决的，在对应的数组位置存放链表的头结点。对链表而言，新加入的节点会从<strong>头结点加入</strong>。</p><p>多线程访问时：</p><p>（1）在hashmap做put操作的时候会调用下面方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。      </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;      </span><br><span class="line">        <span class="comment">// 保存“bucketIndex”位置的值到“e”中      </span></span><br><span class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];      </span><br><span class="line">        <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，      </span></span><br><span class="line">        <span class="comment">// 设置“e”为“新Entry的下一个节点”      </span></span><br><span class="line">        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);      </span><br><span class="line">        <span class="comment">// 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小      </span></span><br><span class="line">        <span class="keyword">if</span> (size++ &gt;= threshold)      </span><br><span class="line">            resize(<span class="number">2</span> * table.length);      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>现在假如A线程和B线程同时对同一个数组位置调用addEntry，两个线程会同时得到现在的头结点，然后A写入新的头结点之后，B也写入新的头结点，那B的写入操作就会覆盖A的写入操作造成A的写入操作丢失。</p><p>（2）删除键值对的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style="font-size: 18px;"&gt;      &lt;/span&gt;// 删除“键为key”的元素      </span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">removeEntryForKey</span><span class="params">(Object key)</span> </span>&#123;      </span><br><span class="line">        <span class="comment">// 获取哈希值。若key为null，则哈希值为0；否则调用hash()进行计算      </span></span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key.hashCode());      </span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);      </span><br><span class="line">        Entry&lt;K,V&gt; prev = table[i];      </span><br><span class="line">        Entry&lt;K,V&gt; e = prev;      </span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 删除链表中“键为key”的元素      </span></span><br><span class="line">        <span class="comment">// 本质是“删除单向链表中的节点”      </span></span><br><span class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;      </span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;      </span><br><span class="line">            Object k;      </span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;      </span><br><span class="line">                ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;      </span><br><span class="line">                modCount++;      </span><br><span class="line">                size--;      </span><br><span class="line">                <span class="keyword">if</span> (prev == e)      </span><br><span class="line">                    table[i] = next;      </span><br><span class="line">                <span class="keyword">else</span>     </span><br><span class="line">                    prev.next = next;      </span><br><span class="line">                e.recordRemoval(<span class="keyword">this</span>);      </span><br><span class="line">                <span class="keyword">return</span> e;      </span><br><span class="line">            &#125;      </span><br><span class="line">            prev = e;      </span><br><span class="line">            e = next;      </span><br><span class="line">        &#125;      </span><br><span class="line">     </span><br><span class="line">        <span class="keyword">return</span> e;      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当多个线程同时操作同一个数组位置的时候，也都会先取得现在状态下该位置存储的头结点，然后各自去进行计算操作，之后再把结果写会到该数组位置去，其实写回的时候可能其他的线程已经就把这个位置给修改过了，就会覆盖其他线程的修改.</p><p>(3)addEntry中当加入新的键值对后键值对总数量超过门限值的时候会调用一个resize操作，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重新调整HashMap的大小，newCapacity是调整后的容量      </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;      </span><br><span class="line">        Entry[] oldTable = table;      </span><br><span class="line">        <span class="keyword">int</span> oldCapacity = oldTable.length;     </span><br><span class="line">        <span class="comment">//如果就容量已经达到了最大值，则不能再扩容，直接返回    </span></span><br><span class="line">        <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;      </span><br><span class="line">            threshold = Integer.MAX_VALUE;      </span><br><span class="line">            <span class="keyword">return</span>;      </span><br><span class="line">        &#125;      </span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 新建一个HashMap，将“旧HashMap”的全部元素添加到“新HashMap”中，      </span></span><br><span class="line">        <span class="comment">// 然后，将“新HashMap”赋值给“旧HashMap”。      </span></span><br><span class="line">        Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];      </span><br><span class="line">        transfer(newTable);      </span><br><span class="line">        table = newTable;      </span><br><span class="line">        threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个操作会新生成一个新的容量的数组，然后对原数组的所有键值对重新进行计算和写入新的数组，之后指向新生成的数组。</p><p>​      当多个线程同时检测到总数量超过门限值的时候就会同时调用resize操作，各自生成新的数组并rehash后赋给该map底层的数组table，结果最终只有最后一个线程生成的新数组被赋给table变量，其他线程的均会丢失。而且当某些线程已经完成赋值而其他线程刚开始的时候，就会用已经被赋值的table作为原始数组，这样也会有问题。</p><h2 id="3-是否提供contains方法"><a href="#3-是否提供contains方法" class="headerlink" title="3.是否提供contains方法"></a>3.是否提供contains方法</h2><p><strong>HashMap</strong>把Hashtable的contains方法去掉了，改成containsValue和containsKey，因为contains方法容易让人引起误解。</p><p><strong>Hashtable</strong>则保留了contains，containsValue和containsKey三个方法，其中contains和containsValue功能相同。</p><p><strong>Hashtable的ContainsKey方法和ContainsValue的源码：</strong></p><p>containsValue方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;      </span><br><span class="line">     <span class="keyword">return</span> contains(value);      </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>contains方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断Hashtable是否包含“值(value)”      </span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object value)</span> </span>&#123;      </span><br><span class="line">     <span class="comment">//注意，Hashtable中的value不能是null，      </span></span><br><span class="line">     <span class="comment">// 若是null的话，抛出异常!      </span></span><br><span class="line">     <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;      </span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();      </span><br><span class="line">     &#125;      </span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 从后向前遍历table数组中的元素(Entry)      </span></span><br><span class="line">     <span class="comment">// 对于每个Entry(单向链表)，逐个遍历，判断节点的值是否等于value      </span></span><br><span class="line">     Entry tab[] = table;      </span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = tab.length ; i-- &gt; <span class="number">0</span> ;) &#123;      </span><br><span class="line">         <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next) &#123;      </span><br><span class="line">             <span class="keyword">if</span> (e.value.equals(value)) &#123;      </span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">true</span>;      </span><br><span class="line">             &#125;      </span><br><span class="line">         &#125;      </span><br><span class="line">     &#125;      </span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;      </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>containsKey方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断Hashtable是否包含key      </span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;      </span><br><span class="line">     Entry tab[] = table;      </span><br><span class="line">/计算hash值，直接用key的hashCode代替    </span><br><span class="line">     <span class="keyword">int</span> hash = key.hashCode();        </span><br><span class="line">     <span class="comment">// 计算在数组中的索引值     </span></span><br><span class="line">     <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;      </span><br><span class="line">     <span class="comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素      </span></span><br><span class="line">     <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;      </span><br><span class="line">         <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;      </span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;      </span><br><span class="line">         &#125;      </span><br><span class="line">     &#125;      </span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;      </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>HashMap的ContainsKey方法和ContainsValue的源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HashMap是否包含key      </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;      </span><br><span class="line">        <span class="keyword">return</span> getEntry(key) != <span class="keyword">null</span>;      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回“键为key”的键值对      </span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;      </span><br><span class="line">        <span class="comment">// 获取哈希值      </span></span><br><span class="line">        <span class="comment">// HashMap将“key为null”的元素存储在table[0]位置，“key不为null”的则调用hash()计算哈希值      </span></span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key.hashCode());      </span><br><span class="line">        <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素      </span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];      </span><br><span class="line">             e != <span class="keyword">null</span>;      </span><br><span class="line">             e = e.next) &#123;      </span><br><span class="line">            Object k;      </span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;      </span><br><span class="line">                ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))      </span><br><span class="line">                <span class="keyword">return</span> e;      </span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否包含“值为value”的元素      </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;      </span><br><span class="line">    <span class="comment">// 若“value为null”，则调用containsNullValue()查找      </span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>)      </span><br><span class="line">            <span class="keyword">return</span> containsNullValue();      </span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 若“value不为null”，则查找HashMap中是否有值为value的节点。      </span></span><br><span class="line">    Entry[] tab = table;      </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)      </span><br><span class="line">            <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)      </span><br><span class="line">                <span class="keyword">if</span> (value.equals(e.value))      </span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;      </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-key和value是否允许null值"><a href="#4-key和value是否允许null值" class="headerlink" title="4.key和value是否允许null值"></a>4.key和value是否允许null值</h2><p>其中key和value都是对象，并且不能包含重复key，但可以包含重复的value。</p><p>​      通过上面的ContainsKey方法和ContainsValue的源码我们可以很明显的看出：</p><p>​      <strong>Hashtable</strong>中，key和value都不允许出现null值。但是如果在Hashtable中有类似put(null,null)的操作，编译同样可以通过，因为key和value都是Object类型，但运行时会抛出NullPointerException异常，这是JDK的规范规定的。</p><p>​        <strong>HashMap</strong>中，<font color="#ff0000"><strong>注意：</strong></font>null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。当get()方法返回null值时，可能是 HashMap中没有该键，也可能使该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键， 而应该用containsKey()方法来判断。</p><h2 id="5-遍历方式的内部实现上不同"><a href="#5-遍历方式的内部实现上不同" class="headerlink" title="5.遍历方式的内部实现上不同"></a>5.遍历方式的内部实现上不同</h2><p>​         Hashtable、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式 。</p><h2 id="6-hash值不同"><a href="#6-hash值不同" class="headerlink" title="6.hash值不同"></a>6.hash值不同</h2><p>​        <strong>哈希值的使用不同，HashTable直接使用对象的hashCode。而HashMap重新计算hash值。</strong></p><p>​      hashCode是jdk根据对象的地址或者字符串或者数字算出来的int类型的数值。</p><p>​      Hashtable计算hash值，直接用key的hashCode()，而HashMap重新计算了key的hash值，Hashtable在求hash值对应的位置索引时，用取模运算，而HashMap在求位置索引时，则用与运算，且这里一般先用hash&amp;0x7FFFFFFF后，再对length取模，&amp;0x7FFFFFFF的目的是为了将负的hash值转化为正值，因为hash值有可能为负数，而&amp;0x7FFFFFFF后，只有符号外改变，而后面的位都不变。</p><h2 id="7-内部实现使用的前数组初始化和扩容方式不同"><a href="#7-内部实现使用的前数组初始化和扩容方式不同" class="headerlink" title="7.内部实现使用的前数组初始化和扩容方式不同"></a>7.内部实现使用的前数组初始化和扩容方式不同</h2><p>​        HashTable在不指定容量的情况下的默认容量为11，而HashMap为16，Hashtable不要求底层数组的容量一定要为2的整数次幂，而HashMap则要求一定为2的整数次幂。</p><p>​      Hashtable和HashMap它们两个内部实现方式的数组的初始大小和扩容的方式。HashTable中hash数组默认大小是11，增加的方式是 old*2+1。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HashMap&quot;&gt;&lt;a href=&quot;#HashMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap&quot;&gt;&lt;/a&gt;HashMap&lt;/h1&gt;&lt;h2 id=&quot;HashMap简介&quot;&gt;&lt;a href=&quot;#HashMap简介&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="HashMap和HashTable" scheme="http://yoursite.com/tags/HashMap和HashTable/"/>
    
  </entry>
  
  <entry>
    <title>基本类型与包装类</title>
    <link href="http://yoursite.com/2020/01/18/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <id>http://yoursite.com/2020/01/18/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8C%85%E8%A3%85%E7%B1%BB/</id>
    <published>2020-01-18T08:45:01.000Z</published>
    <updated>2021-06-06T14:06:03.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><h2 id="有了基本类型为什么会有包装类"><a href="#有了基本类型为什么会有包装类" class="headerlink" title="有了基本类型为什么会有包装类"></a>有了基本类型为什么会有包装类</h2><p>  在Java语言中，new一个对象存储在堆里，我们通过栈中的引用来使用这些对象；出现了基本类型，对于这些类型不是用new关键字来创建，而是直接将变量的值存储在栈中，因此更加高效。</p><p>  为了让基本类型也具有对象的特征，就出现了包装类型，如，向集合list等中存放类型为object，就需要包装类。</p><h2 id="基本类型与包装类的相互转化"><a href="#基本类型与包装类的相互转化" class="headerlink" title="基本类型与包装类的相互转化"></a>基本类型与包装类的相互转化</h2><h3 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h3><p>自动装箱</p><p>手动装箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//自动装箱</span></span><br><span class="line">Integer ii = i;</span><br><span class="line">System.out.println(<span class="string">"自动装箱"</span> + ii);</span><br><span class="line">Integer iii = <span class="keyword">new</span> Integer(i);</span><br><span class="line">System.out.println(<span class="string">"自动装箱"</span> + iii);</span><br><span class="line"><span class="comment">//手动装箱</span></span><br><span class="line">Integer iiii = Integer.valueOf(i);</span><br><span class="line">System.out.println(<span class="string">"手动装箱"</span> + iiii);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">自动装箱<span class="number">1</span></span><br><span class="line">自动装箱<span class="number">1</span></span><br><span class="line">手动装箱<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="拆箱"><a href="#拆箱" class="headerlink" title="拆箱"></a>拆箱</h3><p>自动拆箱</p><p>手动拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Integer number = <span class="number">11</span>;</span><br><span class="line"><span class="comment">//自动拆箱</span></span><br><span class="line"><span class="keyword">int</span> j = number;</span><br><span class="line">System.out.println(<span class="string">"自动拆箱"</span> + j);</span><br><span class="line"><span class="comment">//手动拆箱</span></span><br><span class="line"><span class="keyword">int</span> jj = number.intValue();</span><br><span class="line">System.out.println(<span class="string">"手动拆箱"</span> + jj);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">自动拆箱<span class="number">11</span></span><br><span class="line">手动拆箱<span class="number">11</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="String和int相互转化"><a href="#String和int相互转化" class="headerlink" title="String和int相互转化"></a>String和int相互转化</h2><h3 id="String-int"><a href="#String-int" class="headerlink" title="String-int"></a>String-int</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String转化为int</span></span><br><span class="line">String s = <span class="string">"123"</span>;</span><br><span class="line"><span class="comment">//方法1</span></span><br><span class="line">Integer integer = <span class="keyword">new</span> Integer(s);</span><br><span class="line"><span class="keyword">int</span> j = integer.intValue();</span><br><span class="line">System.out.println(j);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="comment">//十进制形式解析字符串;默认以十进制形式解析int i = Integer.parseInt(s);</span></span><br><span class="line"><span class="keyword">int</span> i = Integer.parseInt(s,<span class="number">10</span>);</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><h3 id="int-String"><a href="#int-String" class="headerlink" title="int - String"></a>int - String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int转化为String</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">123</span>;</span><br><span class="line"><span class="comment">//方法1</span></span><br><span class="line">String s1 = i + <span class="string">""</span>;</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line">String s = String.valueOf(i);</span><br><span class="line">System.out.println(s1);</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure><h3 id="int-String-1"><a href="#int-String-1" class="headerlink" title="int-String"></a>int-String</h3><h2 id="基本类型和包装类区别"><a href="#基本类型和包装类区别" class="headerlink" title="基本类型和包装类区别"></a>基本类型和包装类区别</h2><h3 id="声明方式不同"><a href="#声明方式不同" class="headerlink" title="声明方式不同"></a>声明方式不同</h3><p>基本类型不使用new关键字，而包装类型需要使用new关键字来在堆中分配存储空间；</p><h3 id="存储方式及位置不同"><a href="#存储方式及位置不同" class="headerlink" title="存储方式及位置不同"></a>存储方式及位置不同</h3><p>基本类型是直接将变量值存储在栈中，而包装类型是将对象放在堆中，然后通过引用来使用；</p><h3 id="初始值不同"><a href="#初始值不同" class="headerlink" title="初始值不同"></a>初始值不同</h3><p>基本类型的初始值如int为0，boolean为false，而包装类型的初始值为null；</p><h3 id="使用方式不同"><a href="#使用方式不同" class="headerlink" title="使用方式不同"></a>使用方式不同</h3><p>基本类型直接赋值直接使用就好，而包装类型在集合如Collection、Map时会使用到。</p><h2 id="基本类型和包装类的关系"><a href="#基本类型和包装类的关系" class="headerlink" title="基本类型和包装类的关系"></a>基本类型和包装类的关系</h2><p>byte →    Byte</p><p>short    →    Short</p><p>int    →    Integer</p><p>long →    Long</p><p>float    →    Float</p><p>double    →    Double</p><p>char    →    Character</p><p>boolean→    Boolean</p><p><strong>针对Integer作出具体介绍，其他类似</strong>；</p><h1 id="Integer类"><a href="#Integer类" class="headerlink" title="Integer类"></a>Integer类</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.BYTES);</span><br><span class="line"><span class="comment">//程序结果</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.MAX_VALUE);</span><br><span class="line"><span class="comment">//程序结果</span></span><br><span class="line"><span class="number">2147483647</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.MIN_VALUE);</span><br><span class="line"><span class="comment">//程序结果</span></span><br><span class="line">-<span class="number">2147483648</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> System.out.println(Integer.SIZE);</span><br><span class="line"><span class="comment">//程序结果</span></span><br><span class="line"><span class="number">32</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.TYPE);</span><br><span class="line"><span class="comment">//程序结果</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer integer = <span class="keyword">new</span> Integer(<span class="number">1234</span>);</span><br><span class="line">      System.out.println(integer.TYPE);</span><br><span class="line">      System.out.println(integer);</span><br><span class="line"><span class="comment">//程序结果</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">      Integer integer1 = <span class="keyword">new</span> Integer(<span class="string">"1234"</span>);</span><br><span class="line">      System.out.println(integer1.TYPE);</span><br><span class="line">      System.out.println(integer1);</span><br><span class="line"><span class="comment">//程序结果</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">int</span> a = Integer.bitCount(<span class="number">123</span>);</span><br><span class="line">      System.out.println(a);</span><br><span class="line"><span class="comment">//程序结果</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">13</span>;</span><br><span class="line">      <span class="keyword">byte</span> b = a.byteValue();</span><br><span class="line">      System.out.println(b);</span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.compare(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"><span class="comment">//程序结果</span></span><br><span class="line">-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">12</span>;</span><br><span class="line">Integer b = <span class="number">123</span>;</span><br><span class="line">System.out.println(a.compareTo(b));</span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.decode(<span class="string">"1234"</span>));</span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">12</span>;</span><br><span class="line">Integer b = <span class="number">123</span>;</span><br><span class="line">System.out.println(a.equals(b));</span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.max(<span class="number">11</span>,<span class="number">22</span>));</span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.min(<span class="number">11</span>,<span class="number">22</span>));</span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.parseInt(<span class="string">"12345"</span>));</span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.parseInt(<span class="string">"98345"</span>,<span class="number">16</span>));</span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.sum(<span class="number">12</span>,<span class="number">23</span>));</span><br></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><ul><li><ul><li></li></ul></li></ul><h1 id="特别注意的地方总结"><a href="#特别注意的地方总结" class="headerlink" title="特别注意的地方总结"></a>特别注意的地方总结</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Integer i1 = <span class="number">97</span>;</span><br><span class="line">Integer i2 = <span class="number">97</span>;</span><br><span class="line">System.out.println(i1 == i2);</span><br><span class="line">System.out.println(i1.equals(i2));</span><br><span class="line">System.out.println(<span class="string">"---------------------------------------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">Integer i3 = <span class="number">197</span>;</span><br><span class="line">Integer i4 = <span class="number">197</span>;</span><br><span class="line">System.out.println(i3 == i4);</span><br><span class="line">System.out.println(i3.equals(i4));</span><br></pre></td></tr></table></figure><p>程序结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>因为在byte范围内，自动装箱就不会创建新的对象，而是从常量池中获取，Integer类型会自动拆箱为int相比较，而在byte范围外的值就会再创建新对象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;包装类&quot;&gt;&lt;a href=&quot;#包装类&quot; class=&quot;headerlink&quot; title=&quot;包装类&quot;&gt;&lt;/a&gt;包装类&lt;/h1&gt;&lt;h2 id=&quot;有了基本类型为什么会有包装类&quot;&gt;&lt;a href=&quot;#有了基本类型为什么会有包装类&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="包装类" scheme="http://yoursite.com/tags/包装类/"/>
    
  </entry>
  
  <entry>
    <title>Collection接口的list具体实现类之ArrayList</title>
    <link href="http://yoursite.com/2020/01/02/Collection%E6%8E%A5%E5%8F%A3%E7%9A%84list%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%B9%8BArrayList/"/>
    <id>http://yoursite.com/2020/01/02/Collection%E6%8E%A5%E5%8F%A3%E7%9A%84list%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%B9%8BArrayList/</id>
    <published>2020-01-02T02:41:30.000Z</published>
    <updated>2020-01-02T03:06:17.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><p>应用程序即为：数据结构+算法</p><p>解决算法复杂度问题。</p><p>基本实现以下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">add(E e) ;</span><br><span class="line">add(<span class="keyword">int</span> index, E element); <span class="comment">//在列表中指定的位置上插入指定的元素。</span></span><br><span class="line">remove(<span class="keyword">int</span> index) ;<span class="comment">//移除此列表中指定位置的元素</span></span><br><span class="line">set(<span class="keyword">int</span> index, E element) ;<span class="comment">//用指定元素替换此列表中指定位置的元素。 </span></span><br><span class="line">get(<span class="keyword">int</span> index) ;<span class="comment">//返回此列表中指定位置的元素。 </span></span><br><span class="line">clear() ;<span class="comment">//从这个列表中移除所有的元素。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ArrayList&quot;&gt;&lt;a href=&quot;#ArrayList&quot; class=&quot;headerlink&quot; title=&quot;ArrayList&quot;&gt;&lt;/a&gt;ArrayList&lt;/h1&gt;&lt;p&gt;应用程序即为：数据结构+算法&lt;/p&gt;
&lt;p&gt;解决算法复杂度问题。&lt;/p&gt;
&lt;p&gt;基本</summary>
      
    
    
    
    
    <category term="ArrayList" scheme="http://yoursite.com/tags/ArrayList/"/>
    
  </entry>
  
  <entry>
    <title>线程安全与线程不安全</title>
    <link href="http://yoursite.com/2020/01/02/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2020/01/02/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8/</id>
    <published>2020-01-02T01:53:53.000Z</published>
    <updated>2020-01-02T02:09:17.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程安全与线程不安全"><a href="#线程安全与线程不安全" class="headerlink" title="线程安全与线程不安全"></a>线程安全与线程不安全</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>线程安全</strong>：指多个线程在执行同一段代码的时候采用加锁机制,使每次的执行结果和单线程执行的结果都是一样的,不存在执行程序时出现意外结果。</p><p><strong>线程不安全</strong>: 是指不提供加锁机制保护,有可能出现多个线程先后更改数据造成所得到的数据是脏数据。</p><p>无论是单线程还是多线程在缺少保护机制的情况下，运行就会出现不一致。</p><h2 id="什么原因造成线程不安全"><a href="#什么原因造成线程不安全" class="headerlink" title="什么原因造成线程不安全"></a>什么原因造成线程不安全</h2><p><strong>全局变量</strong>及<strong>静态变量</strong>是线程不安全的主要原因。</p><p>1.若只是对全局变量及静态变量进行读操作而不涉及写操作，那就不涉及安全性问题。</p><p>2.若有多个线程对变量执行写操作，那么就会涉及安全。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="同步代码块-synchronized"><a href="#同步代码块-synchronized" class="headerlink" title="同步代码块(synchronized)"></a>同步代码块(synchronized)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步锁)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//方法体</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同步方法-synchronized"><a href="#同步方法-synchronized" class="headerlink" title="同步方法(synchronized)"></a>同步方法(synchronized)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="锁机制-Lock"><a href="#锁机制-Lock" class="headerlink" title="锁机制(Lock)"></a>锁机制(Lock)</h3><p>比synchronized关键字更强大也更加灵活</p><p>基于Lock接口及其实现类（例如：ReentrantLock）</p><p>提供了更多的功能。tryLock()方法的实现，这个方法试图获取锁,若锁被占用，那么跳过，执行下面代码。</p><p>Lock接口允许分离读和写操作，允许多个线程读和只有一个写线程。</p><p>具有更好的性能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintQueue</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> Lock A=<span class="keyword">new</span> ReentrantLock();</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线程安全与线程不安全&quot;&gt;&lt;a href=&quot;#线程安全与线程不安全&quot; class=&quot;headerlink&quot; title=&quot;线程安全与线程不安全&quot;&gt;&lt;/a&gt;线程安全与线程不安全&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="线程安全" scheme="http://yoursite.com/tags/线程安全/"/>
    
  </entry>
  
  <entry>
    <title>小程序的flex布局</title>
    <link href="http://yoursite.com/2019/12/09/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84flex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2019/12/09/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84flex%E5%B8%83%E5%B1%80/</id>
    <published>2019-12-09T01:31:51.000Z</published>
    <updated>2020-01-01T04:24:58.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1><p>​    小程序推荐使用flex布局，也可以使用其他布局（Div、CSS等）</p><h2 id="flex-direction-flex方向布局"><a href="#flex-direction-flex方向布局" class="headerlink" title="flex-direction     flex方向布局"></a>flex-direction     flex方向布局</h2><p><strong>flex-direction：row</strong></p><p>默认从左向右排列</p><p><strong>flex-direction:row-reverse</strong></p><p>默认从右向左排列</p><p><strong>flex-direction:column</strong></p><p>从上向下排列</p><p><strong>flex-direction:column-reverse</strong></p><p>从下向上排列</p><h2 id="flex-wrap-flex换行"><a href="#flex-wrap-flex换行" class="headerlink" title="flex-wrap    flex换行"></a>flex-wrap    flex换行</h2><p><strong>flex-wrap：nowrap</strong></p><p>默认不换行</p><p><strong>flex-wrap：wrap</strong></p><p>换行</p><p><strong>flex-wrap：wrap-reverse</strong></p><p>逆向换行</p><h2 id="justify-content-flex对齐方式与间距"><a href="#justify-content-flex对齐方式与间距" class="headerlink" title="justify-content   flex对齐方式与间距"></a>justify-content   flex对齐方式与间距</h2><p><strong>justify-content：flex-start</strong></p><p>默认左对齐</p><p><strong>justify-content:flex-end</strong></p><p>右对齐</p><p><strong>justify-content:center</strong></p><p>居中对齐</p><p><strong>justify-content:space-around</strong></p><p>在成员元素周围包裹空白</p><p><strong>justify-content:space-between</strong></p><p>在成员元素中间留空白</p><h2 id="order字段"><a href="#order字段" class="headerlink" title="order字段"></a>order字段</h2><p>通过数字对flex内部容器成员设置显示顺序</p><p>order：数字</p><p>eg: order：1；order:3;order:2;</p><p>按照1，2，3的顺序显示</p><h2 id="flex字段"><a href="#flex字段" class="headerlink" title="flex字段"></a>flex字段</h2><p>配置成员行级属性所占比例</p><p>flex：数字</p><p>eg: flex:3;flex:2;flex:4</p><p>分成9份，占不同宽度</p><h1 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h1><h2 id="通用标签"><a href="#通用标签" class="headerlink" title="通用标签"></a>通用标签</h2><p><strong>id</strong></p><p><strong>class</strong> </p><p><strong>style</strong></p><p><strong>hidden(没有懒加载)</strong> </p><p><strong>data-*</strong></p><p><strong>bind * /catch *</strong>适用于EventHandler</p><h2 id="组件7大类"><a href="#组件7大类" class="headerlink" title="组件7大类"></a>组件7大类</h2><h3 id="视图组件"><a href="#视图组件" class="headerlink" title="视图组件"></a>视图组件</h3><h4 id="view组件"><a href="#view组件" class="headerlink" title="view组件"></a>view组件</h4><p>hover-class=”none”</p><p>指定按下去的样式</p><p>hover-stop-propagation=”false”</p><p>指定是否组织本节点的祖先节点出现点击态</p><p>hover-start-time=“2000”</p><p>按住后多久出现点击态</p><p>hover-stay-time=“1000”</p><p>手指松开后点击保留时间</p><h4 id="scroll-view组件"><a href="#scroll-view组件" class="headerlink" title="scroll-view组件"></a>scroll-view组件</h4><p>&lt; scroll-view&gt;&lt; /scroll-view&gt;</p><p>上下滑动/左右滑动</p><p><strong>scroll-x=”true”</strong></p><p><strong>scroll-y=”false”</strong></p><p><strong>bindscrolltoupper=”scrolltoupper”</strong>    </p><p><font color="ff0000">有一个距离顶部还有多少的时候触发这个事件</font></p><p><font color="ff0000">&lt; upper-threshold =”0”&gt; //默认为50</font></p><p>注意：scrolltoupper只是事件名称</p><p><strong>bindscrolltoupper=”scrolltolower”</strong></p><p><font color="ff0000">有一个距离底部还有多少的时候触发这个事件</font></p><p><font color="ff0000">&lt; lower-threshold =”0”&gt; //默认为50</font></p><p>注意：scrolltolower只是事件名称</p><p><strong>scroll-top=”100”</strong></p><p>竖向滚动条位置</p><p><strong>scroll-left=”100”</strong></p><p>横向滚动条位置(距离左边多远)</p><p><strong>enable-back-to-top=”true”</strong></p><p>支持滚动条从底部到顶部</p><p><strong>scroll-with-animation=”true”</strong></p><p>滚动时动画过度</p><p><strong>bindscroll=”bindscroll”</strong></p><p>注意：bindscroll为时间名</p><p><strong>scroll-into-view=”b”</strong></p><p>注意：b为id名</p><p>值为子元素id 设置那个方向，滚动到哪个方向的位置</p><h4 id="swiper组件"><a href="#swiper组件" class="headerlink" title="swiper组件"></a>swiper组件</h4><p>即<strong>轮播图</strong></p><h4 id="movable-area和movable-view"><a href="#movable-area和movable-view" class="headerlink" title="movable-area和movable-view"></a>movable-area和movable-view</h4><p><strong>direction=“none”</strong></p><p>属性值有：all/vertical/horizontal等</p><p>movable-area在movable-view里面可移动的范围</p><p><strong>inertia=“true”</strong></p><p>有惯性</p><p><strong>out-of-bounds=”true”</strong></p><p>超越边界区域（即movable-view）是否还可以移动</p><p><strong>x=”50”</strong></p><p>定义x坐标</p><p><strong>y=“50”</strong></p><p>定义y坐标</p><p><strong>damping=”100”</strong></p><p>阻尼系数越大移动的越快</p><p><strong>friction=”100”</strong></p><p>摩擦系数越大，滑块停止越快</p><p><strong>disable=”true”</strong></p><p>true为禁用</p><p><strong>scale=”true”</strong></p><p>是否支持双指缩放</p><p><strong>scale-max</strong></p><p>缩放倍数最大值</p><p><strong>scale-min</strong></p><p>缩放倍数最小值</p><p><strong>scale-value</strong></p><p>缩放倍数取值（范围在0.5-10之间）</p><p><strong>bindchange=”事件名”</strong></p><p>滑动期间的事件</p><p><strong>bindscale=”事件名”</strong></p><p>缩放时触发的事件</p><h3 id="基础组件-1"><a href="#基础组件-1" class="headerlink" title="基础组件"></a>基础组件</h3><h4 id="icon组件"><a href="#icon组件" class="headerlink" title="icon组件"></a>icon组件</h4><p>type=“success” ；success-nocircle/info/warn/waiting/cancel/download/search/clear等</p><p>size=“12”</p><p>color=“blue”</p><h4 id="text文本组件"><a href="#text文本组件" class="headerlink" title="text文本组件"></a>text文本组件</h4><p><strong>selectedable=”true”</strong></p><p>可以被复制</p><p><strong>space=｛｛true｝｝</strong></p><p><strong>decode=｛｛true｝｝</strong></p><p>对&amp; ensp; &amp; nbsp;解码</p><h4 id="rich-text富文本组件"><a href="#rich-text富文本组件" class="headerlink" title="rich-text富文本组件"></a>rich-text富文本组件</h4><p>好多小Tips</p><h4 id="progress进度条组件"><a href="#progress进度条组件" class="headerlink" title="progress进度条组件"></a>progress进度条组件</h4><p><strong>percent=”30”</strong></p><p>以百分比的形式显示</p><p><strong>stroke-width=“”</strong></p><p>进度条宽度</p><p><strong>activeColor=“red”</strong></p><p>已进行进度条长度</p><p><strong>backgroundColor=“blue”</strong></p><p><strong>active=”true”</strong></p><p>选择进度条播放动画</p><p><strong>active-mode=”forwards”</strong></p><p>从上次结束位置开始</p><h3 id="表单组件"><a href="#表单组件" class="headerlink" title="表单组件"></a>表单组件</h3><h4 id="button按钮"><a href="#button按钮" class="headerlink" title="button按钮"></a>button按钮</h4><p>size=“string”           mini等</p><p>type=”string”          default/primary/warn等</p><p>plain=”｛｛true｝｝”           </p><p>disabled=”｛｛true｝｝”</p><p>loading=”｛｛true｝｝”</p><p>form-type=“string”      submit/reset</p><p>open-type=”string”</p><p>hover-class=”string”    </p><h4 id="checkbox-label"><a href="#checkbox-label" class="headerlink" title="checkbox  label"></a>checkbox  label</h4><p>bindingchange</p><p>两个连用</p><p>&lt; label for=”checkbox  的id”&gt;&lt; /label&gt;</p><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><p>cursor-spacing=”100”</p><p>光标与输入框的距离</p><p>focus=｛｛true｝｝</p><p>自动唤醒键盘并聚焦</p><p>confirm-type</p><p>设置键盘右下角文字（改变“完成”为“下一项”）</p><p>confirm-hold=“｛｛true｝｝”</p><p>点击下一项，页面并不会进行什么操作</p><p>cursor</p><p>光标所在位置</p><p>select-start</p><p>select-end</p><p>默认打开光标的起始位置</p><p>adjust-position=“｛｛false｝｝”</p><p>键盘弹起时是否向上推动页面</p><p>bindinput触发的事件</p><p>点击输入框输入的时候</p><p>bindfocus</p><p>获取焦点事件</p><p>bindblur</p><p>失去焦点事件</p><p>bindconfirm</p><p>点击下一项的时候触发的事件</p><h4 id="picker-–选择器"><a href="#picker-–选择器" class="headerlink" title="picker –选择器"></a>picker –选择器</h4><p><strong>普通选择器–model=selector</strong></p><p>range=”“  设置范围</p><p>range-key=”数组的关键字名”</p><p>bindchange=“绑定事件名”</p><p>cancel=“触发取消事件名”</p><p>columnchange</p><p><strong>多列选择器 –muliselector</strong></p><h4 id="picker-view"><a href="#picker-view" class="headerlink" title="picker-view"></a>picker-view</h4><p>bindchange=“绑定事件名”</p><h4 id="radio"><a href="#radio" class="headerlink" title="radio"></a>radio</h4><p>bindchange=“绑定事件名”</p><p>checked</p><p>disable</p><p>color</p><h4 id="slider-–滑动选择器"><a href="#slider-–滑动选择器" class="headerlink" title="slider –滑动选择器"></a>slider –滑动选择器</h4><p>min</p><p>max</p><p>show-value</p><p>step –步长</p><p>backgroundColor</p><p>block-color=“green”</p><h4 id="switch-–开关选择器"><a href="#switch-–开关选择器" class="headerlink" title="switch –开关选择器"></a>switch –开关选择器</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flex布局&quot;&gt;&lt;a href=&quot;#flex布局&quot; class=&quot;headerlink&quot; title=&quot;flex布局&quot;&gt;&lt;/a&gt;flex布局&lt;/h1&gt;&lt;p&gt;​    小程序推荐使用flex布局，也可以使用其他布局（Div、CSS等）&lt;/p&gt;
&lt;h2 id=&quot;fle</summary>
      
    
    
    
    
    <category term="flex布局" scheme="http://yoursite.com/tags/flex布局/"/>
    
  </entry>
  
  <entry>
    <title>MySql数据库</title>
    <link href="http://yoursite.com/2019/12/03/MySql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2019/12/03/MySql%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2019-12-03T12:14:18.000Z</published>
    <updated>2020-01-16T10:03:53.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySql数据库"><a href="#MySql数据库" class="headerlink" title="MySql数据库"></a>MySql数据库</h1><h2 id="1-数据库概念"><a href="#1-数据库概念" class="headerlink" title="1.数据库概念"></a>1.数据库概念</h2><h3 id="1-1关系型数据库"><a href="#1-1关系型数据库" class="headerlink" title="1.1关系型数据库"></a>1.1关系型数据库</h3><p><img src="https://i.loli.net/2020/01/16/qewGzZaOmx59Mu2.png" alt="error"></p><p>关系型数据库：</p><p><strong>MariaDB、SQLite、SQLServer、MySQL、Oracle、PostgreSQL</strong></p><p>​    关系型数据库最典型的数据结构是表，由二维表及其之间的联系所组成的一个数据组织</p><p><strong>MariaDB:</strong>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，使用XtraDB（英语：XtraDB）来代替MySQL的InnoDB。</p><p><strong>SQLite:</strong>是一款轻型的数据库，是遵守<a href="https://baike.baidu.com/item/ACID/10738" target="_blank" rel="noopener">ACID</a>的关系型<a href="https://baike.baidu.com/item/数据库管理系统" target="_blank" rel="noopener">数据库管理系统</a>，它包含在一个相对小的C库中。它能够支持Windows/Linux/Unix等等主流的<a href="https://baike.baidu.com/item/操作系统/192" target="_blank" rel="noopener">操作系统</a>。</p><p><strong>SQLServer：</strong>SQL语言的主要功能就是同各种数据库建立联系，进行沟通。SQL被作为<a href="https://baike.baidu.com/item/关系型数据库管理系统/696511" target="_blank" rel="noopener">关系型数据库管理系统</a>的标准语言。</p><p><strong>MySQL</strong>：MySQL是一个关系型数据库管理系统，在 WEB 应用方面，MySQL是最好的 <a href="https://baike.baidu.com/item/RDBMS/1048260" target="_blank" rel="noopener">RDBMS</a> (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p><p><strong>PostgreSQL：</strong>PostgreSQL是一种特性非常齐全的自由软件的对象-关系型数据库管理系统（<a href="https://baike.baidu.com/item/ORDBMS/870762" target="_blank" rel="noopener">ORDBMS</a>），是以<a href="https://baike.baidu.com/item/加州大学/3298010" target="_blank" rel="noopener">加州大学</a>计算机系开发的POSTGRES，4.2版本为基础的对象关系型数据库管理系统。同样，PostgreSQL也可以用许多方法扩展，例如通过增加新的数据类型、函数、操作符、聚集函数、索引方法、过程语言等。</p><h3 id="1-2非关系数据库"><a href="#1-2非关系数据库" class="headerlink" title="1.2非关系数据库"></a>1.2非关系数据库</h3><p><img src="https://i.loli.net/2020/01/16/zyJQICexi7N1c4X.png" alt="error"></p><p>非关系型数据库：</p><p><strong>mongoDB、hbase、redis、CouchDB、Cassandra、Neo4j</strong></p><p>​    非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合，可以是<font color="#ff0000">文档或者键值对</font>等。</p><p>非关系型数据库的分类和比较：<br>1、<strong>文档型</strong><br>2、<strong>key-value型</strong><br>3、<strong>列式数据库</strong><br>4、<strong>图形数据库</strong></p><p><img src="https://i.loli.net/2020/01/16/duQwoIbWXm2EYv3.png" alt="error"></p><p><img src="https://i.loli.net/2020/01/16/3mToD5yj2k7QvCK.png" alt="error"></p><p><img src="https://i.loli.net/2020/01/16/VJ1wLDRZklF8nKU.png" alt="error"></p><p><img src="https://i.loli.net/2020/01/16/NyDTYFrK9HqGPfo.png" alt="error"></p><h2 id="2-数据库操作"><a href="#2-数据库操作" class="headerlink" title="2.数据库操作"></a>2.数据库操作</h2><p>SQL语言一共分为4大类：<strong>数据定义语言DDL</strong>，<strong>数据操纵语言DML</strong>，<strong>数据查询语言DQL</strong>，<strong>数据控制语言DCL</strong>  。</p><p>数据定义语言<strong>DDL</strong>(Data Definition Language) 对象： 数据库和表</p><p>数据操纵语言<strong>DML</strong>(Data Manipulation Language)　对象：纪录(行) 关键词：insert update delete</p><p>数据查询语言<strong>DQL</strong>(Data Query Language) select … from student where 条件 group by 分组字段 having 条件 order by 排序字段  执行顺序：from-&gt;where-&gt;group by-&gt;having-&gt;order by-&gt;select</p><p>数据控制语言<strong>DCL</strong>(Data Control Language)  用户，权限，事务。</p><h3 id="2-1命令行数据库操作"><a href="#2-1命令行数据库操作" class="headerlink" title="2.1命令行数据库操作"></a>2.1命令行数据库操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create database 数据库名; #创建数据库</span><br><span class="line">show databases;          #查看所有数据库</span><br><span class="line">drop database 数据库名;   #删除数据库</span><br><span class="line">use 数据库名;             #使用数据库</span><br></pre></td></tr></table></figure><h3 id="2-2命令行数据库表的操作"><a href="#2-2命令行数据库表的操作" class="headerlink" title="2.2命令行数据库表的操作"></a>2.2命令行数据库表的操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#创建表</span><br><span class="line">create table  表名字(属性名   数据类型);</span><br><span class="line">#查看表结构</span><br><span class="line">Desc 表名字;</span><br><span class="line">#查看表的详细信息</span><br><span class="line">show create table 表名;</span><br><span class="line">#显示数据库中所有的表</span><br><span class="line">show tables;</span><br><span class="line">#删除表</span><br><span class="line">Drop table 表的名字;</span><br><span class="line"></span><br><span class="line">#####修改表</span><br><span class="line">#修改表名字</span><br><span class="line">alter table 表名 rename(to) 新表名;</span><br><span class="line"></span><br><span class="line">#####增加一个字段</span><br><span class="line">#在表的最后位置增加一个字段</span><br><span class="line">alter table 表名 add 字段 数据类型;</span><br><span class="line">#在表的开始位置增加一个字段</span><br><span class="line">alter table 表名 add 字段 数据类型 first;</span><br><span class="line">#在表的指定位置增加一个字段</span><br><span class="line">alter table 表名 add 字段 数据类型 after 存在字段名;</span><br><span class="line">#删除字段</span><br><span class="line">alter table 表名 drop column 删除的字段;</span><br><span class="line"></span><br><span class="line">#####修改字段</span><br><span class="line">#修改字段的数据类型</span><br><span class="line">alter table 表的名字 modify 属性名 类型名字;</span><br><span class="line">#修改字段的名字</span><br><span class="line">alter table 表名字 change 旧的属性名 新的属性名 旧的数据类型;</span><br><span class="line">#同时修改字段的名字和属性</span><br><span class="line">alter table 表名字 change 旧的属性名 新的属性名 新的数据类型;</span><br><span class="line">#修改字段的顺序</span><br><span class="line">alter table 表名字 modify 属性名1 数据类型  first(调整到前面)/after(调整到后面) 属性名2;</span><br></pre></td></tr></table></figure><p>要修改表中的<font color="#ff0000">字段</font>，要注意：<font color="#ff0000">字段类型</font>，如果有数据就要小心</p><h3 id="2-3表的约束关键字"><a href="#2-3表的约束关键字" class="headerlink" title="2.3表的约束关键字"></a>2.3表的约束关键字</h3><p>Mysql完整性约束：</p><table><thead><tr><th>完整性约束关键字</th><th>含义</th></tr></thead><tbody><tr><td>not null</td><td>约束字段的值不能为空</td></tr><tr><td>default</td><td>设置字段的默认值</td></tr><tr><td>unique</td><td>设置字段的值为唯一</td></tr><tr><td>primary key （pk）</td><td>设置字段为表的主键，可以记录这个表记录的唯一标识</td></tr><tr><td>auto_increment</td><td>约束字段的值为自动增加</td></tr><tr><td>foreign key (fk)</td><td>约束字段的值为表的外键</td></tr></tbody></table><h4 id="2-3-1设置非空约束-not-null"><a href="#2-3-1设置非空约束-not-null" class="headerlink" title="2.3.1设置非空约束(not null)"></a>2.3.1设置非空约束(not null)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">####新建表</span><br><span class="line">create table a_01 (属性名 类型名 not null);</span><br><span class="line">#####修改表</span><br><span class="line">alter table 表名 modify 字段 类型 not null;</span><br><span class="line">####删除非空约束</span><br><span class="line">alter table 表名 modify 字段 类型  null;</span><br></pre></td></tr></table></figure><h4 id="2-3-2设置字段的默认值-default"><a href="#2-3-2设置字段的默认值-default" class="headerlink" title="2.3.2设置字段的默认值(default)"></a>2.3.2设置字段的默认值(default)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#新建表</span><br><span class="line">create table 表名 (字段名 类型名 default &apos;默认值&apos;);</span><br><span class="line">#修改表</span><br><span class="line">alter table 表名 modify 字段 数据类型 default &apos;默认值&apos;; </span><br><span class="line">#删除默认值</span><br><span class="line">alter table 表名 alter column 字段名 drop default;</span><br></pre></td></tr></table></figure><h4 id="2-3-3设置唯一约束-unique"><a href="#2-3-3设置唯一约束-unique" class="headerlink" title="2.3.3设置唯一约束(unique)"></a>2.3.3设置唯一约束(unique)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#新建表</span><br><span class="line">create table 表名(属性名 类型名 unique)；</span><br><span class="line">#修改表</span><br><span class="line">alter table 表名 modify 字段 数据类型 unique; </span><br><span class="line">#查看唯一性约束</span><br><span class="line">show keys from 表名;</span><br><span class="line">#删除唯一约束</span><br><span class="line">drop index key_name on 表名;</span><br></pre></td></tr></table></figure><h4 id="2-3-4设置主键-primary-key"><a href="#2-3-4设置主键-primary-key" class="headerlink" title="2.3.4设置主键(primary key)"></a>2.3.4设置主键(primary key)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#新建表</span><br><span class="line">create table 表名(字段 类型 primary key);</span><br><span class="line">#修改表</span><br><span class="line">alter table 表名 modify 字段 类型 primary key;</span><br><span class="line">#删除主键</span><br><span class="line">alter table 表名 drop primary key;</span><br><span class="line"></span><br><span class="line">####多字段主键</span><br><span class="line">#新建表</span><br><span class="line">create table 表名(字段1 类型, 字段2 类型, ... constraint 约束名  primary key (字段1,字段2));</span><br></pre></td></tr></table></figure><h4 id="2-3-5字段自动自加-auto-increment"><a href="#2-3-5字段自动自加-auto-increment" class="headerlink" title="2.3.5字段自动自加(auto_increment)"></a>2.3.5字段自动自加(auto_increment)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#新建表</span><br><span class="line">create table 表名（字段名，类型 auto_increment，….）;</span><br><span class="line">#修改表</span><br><span class="line">alter table 表名 modify a int(11) auto_increment;</span><br><span class="line">#删除自增</span><br><span class="line">alter table dd modify 自增字段 类型;</span><br></pre></td></tr></table></figure><h4 id="2-3-6外键-foreign-key"><a href="#2-3-6外键-foreign-key" class="headerlink" title="2.3.6外键(foreign key)"></a>2.3.6外键(foreign key)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#新建表</span><br><span class="line">create table 表名字(字段名，类型名… ,constraint 外键约束名字 foreign key(外键字段) references 父表名(父表字段))；</span><br><span class="line">#存在表中加外键</span><br><span class="line">alter table 表名 add constraint 外键约束名 foregin key(外键字段) references 父表名（父表字段）</span><br></pre></td></tr></table></figure><h2 id="3-mysql的单表操作"><a href="#3-mysql的单表操作" class="headerlink" title="3 mysql的单表操作"></a>3 mysql的单表操作</h2><h3 id="3-1简单数据记录的查询"><a href="#3-1简单数据记录的查询" class="headerlink" title="3.1简单数据记录的查询"></a>3.1简单数据记录的查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查询所有字段的内容</span><br><span class="line">select *from 表名;</span><br><span class="line">#查询特定的字段内容</span><br><span class="line">select 字段1，字段2，from 表名;</span><br><span class="line">#避免重复的数据查询内容</span><br><span class="line">select distinct 字段 from 表名；</span><br><span class="line">#实现数学四则运算方法查询内容</span><br><span class="line">select id，name，sal*12 as newsal from emp；（可以使用加减乘除）</span><br><span class="line">#设置显示格式数据查询内容 可以使用函数进行合并字符串</span><br><span class="line">select CONCAT(ename,&apos;雇员的年薪：&apos;,sal*12 ) as newasal from emp;</span><br></pre></td></tr></table></figure><h4 id="3-1-1-条件数据记录的查询"><a href="#3-1-1-条件数据记录的查询" class="headerlink" title="3.1.1 条件数据记录的查询"></a>3.1.1 条件数据记录的查询</h4><p>(1)带between and 的关键字的条件查询语句；用来判断字段的数值是否在指定的范围内的条件查询；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#在两者之间：</span><br><span class="line">select column_name(s) from table_name  where column_name between value1 and value2;</span><br><span class="line">#不在两者之间</span><br><span class="line">select sal from emp where sal not between 100 and 5000;</span><br></pre></td></tr></table></figure><p>(2)带有is null关键字的条件查询,不为空条件查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#条件是空</span><br><span class="line">select sal from emp where comm is null;</span><br><span class="line">#条件不为空</span><br><span class="line">select sal from emp where comm is not null;</span><br></pre></td></tr></table></figure><p>(3)带in关键字的条件查询；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename from emp where EMPNO in (7499,7566,7902);</span><br></pre></td></tr></table></figure><p>(4带<strong>like</strong>关键字的条件查询,俗称模糊查询Like关键字支持的通配符如下：”_”通配符，该通配符值能匹配单个字符。”<strong>%</strong>“通配符，该通配符值可以匹配任意长度的字符串，即可是0个字符，1个字符，和多个字符。)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#带有&quot;%&quot;的通配符的模糊查询；</span><br><span class="line">select ename from emp where ename like &apos;a%&apos;;不区分大小写；</span><br><span class="line">select ename from emp where not ename like &apos;a%&apos;;不是a；</span><br><span class="line">#带有&quot;_&quot;的通配符的模糊查询</span><br><span class="line">select ename from emp where ename like &apos;_a%&apos;;第二个字符为a的；</span><br><span class="line">select ename from emp where not ename like &apos;_a%&apos;;第二个字符不为a的；</span><br><span class="line">#带like 的模糊查询注意点</span><br><span class="line">select ename from emp where not ename like &apos;%a%&apos;;没有A的数据；</span><br><span class="line">select ename from emp where sal like &apos;%5%&apos;;工资中含有5的数据；</span><br><span class="line">select ename from emp where sal like &apos;%%&apos;;所有数据；</span><br></pre></td></tr></table></figure><h4 id="3-1-2排序数据记录的查询"><a href="#3-1-2排序数据记录的查询" class="headerlink" title="3.1.2排序数据记录的查询"></a>3.1.2排序数据记录的查询</h4><p>查询结果需要排序 order by;</p><p> asc 升序排列 </p><p>desc 降序排列</p><p>按照单字段排序</p><p>按照多字段排序</p><h4 id="3-1-3限制数据记录的查询"><a href="#3-1-3限制数据记录的查询" class="headerlink" title="3.1.3限制数据记录的查询"></a>3.1.3限制数据记录的查询</h4><p>(1)limit：来限制数据查询结果数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#不指定初始位置方式：</span><br><span class="line">select *from emp where job is null,limit 2;限定只显示两行内容</span><br></pre></td></tr></table></figure><p>(2)数据库查询-分页显示</p><p>指定初始位置方式：</p><p>limit 被应用在分页显示上，对于每一个页限制显示多少内容；但是对于第二页显示的时候要知道第一个的最后位置； </p><p><strong>offset_start</strong> 不然就不能实现多页显示；</p><h3 id="3-2-插入数据"><a href="#3-2-插入数据" class="headerlink" title="3.2 插入数据"></a>3.2 插入数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#插入完整的数据记录</span><br><span class="line">insert into 表名(id, name) values(123, &apos;zhangsan&apos;);</span><br><span class="line">#插入数据记录的一部分</span><br><span class="line">insert into student(需要插入数据的字段) values(字段对应的数据);</span><br><span class="line">#插入多条数据记录</span><br><span class="line">insert into 表名(对应字段) values(对应的的数据1),(对应的的数据2),(对应的的数据3)….;</span><br><span class="line">#插入查询出来的结果</span><br><span class="line">insert into 表名(字段名) select 需要查询字段名 from 表名2;</span><br></pre></td></tr></table></figure><h3 id="3-3更新数据"><a href="#3-3更新数据" class="headerlink" title="3.3更新数据"></a>3.3更新数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#更新特定的数据 (如果这里没有where 就会更新所有数据)</span><br><span class="line">update 表名 set 字段=值,字段=值,字段=值 where 条件;</span><br></pre></td></tr></table></figure><h3 id="3-4-删除数据"><a href="#3-4-删除数据" class="headerlink" title="3.4 删除数据"></a>3.4 删除数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#删除加条件的数据</span><br><span class="line">delete from 表名 where 条件;</span><br><span class="line">#删除所有数据</span><br><span class="line">delete from 表名;</span><br></pre></td></tr></table></figure><h2 id="4-mysql多表操作"><a href="#4-mysql多表操作" class="headerlink" title="4 mysql多表操作"></a>4 mysql多表操作</h2><p>​    Mysql支持连接查询，在具体的实现连接查询的过程中首先需要两个或两个以上的表，按照一定的条件连接，然后进行查询到所要求的数据。一般不使用连接查询，操作效率比较低。Mysql有提供了连接查询的替代—<strong>子查询</strong>。</p><p>​    连接查询首先要对两个或者两个以上的表进行<strong>连接查询操作</strong>。连接操作是关系型数据库的中专门进行数据库操作的关系运算。主要有 ：<strong>并（union）</strong>，<strong>笛卡尔积（cartesian product）</strong>，和专门对数据库操作的<strong>连接join操作</strong>。</p><h3 id="4-1-Union"><a href="#4-1-Union" class="headerlink" title="4.1 Union"></a>4.1 Union</h3><p><font color="#00ff">字段数目、字段类型相同的（两张表）表</font></p><p><font color="#ff0000">把具有相同字段数目和字段类型的表合并到一起,去除相同记录。</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name FROM table_name1 UNION SELECT name FROM table_name2 ....;</span><br></pre></td></tr></table></figure><h3 id="4-2-笛卡尔积（cartesian-product）"><a href="#4-2-笛卡尔积（cartesian-product）" class="headerlink" title="4.2 笛卡尔积（cartesian product）"></a>4.2 笛卡尔积（cartesian product）</h3><p><font color="#00ff">字段数目、字段类型可以相同也可以不同的（两张表）表</font></p><p>就是两张表的乘积，dept表中的每一个部门和emp表中的记录组合，最后是两个表的合并。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp,dept;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/01/16/5OPgZFwAaKc4xod.png" alt="error"></p><p>连接分为：<strong>内连接(inner join)</strong> <strong>外连接(outer join)</strong> <strong>交叉连接(cross join)</strong></p><h4 id="4-2-1-内连接（join）"><a href="#4-2-1-内连接（join）" class="headerlink" title="4.2.1  内连接（join）"></a>4.2.1  内连接（join）</h4><p>按照<font color="#ff0000"><strong>相应的字段值</strong></font>得比较条件进行选择<strong>生成新的关系</strong>。</p><p>内连接(inner join)就是在表关系数据记录中，保留表关系中所有匹配的数据记录，舍弃不匹配的数据记录。按照匹配条件可分为<strong>自然连接</strong>，<strong>等值连接</strong>，<strong>不等连接</strong>。</p><h5 id="4-2-1-1自然连接-natural-join"><a href="#4-2-1-1自然连接-natural-join" class="headerlink" title="4.2.1.1自然连接(natural join)"></a>4.2.1.1自然连接(natural join)</h5><p>在笛卡尔积的基础上，根据表的关系中名称的字段自动进行记录匹配，然后<strong>去掉重复的字段</strong>。在连接条件中使用<strong>等于=运算符比较</strong>被连接列的<strong>列值</strong>，但<strong>删除连接表中重复列</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp natural join dept;</span><br></pre></td></tr></table></figure><h5 id="4-2-1-2等值连接"><a href="#4-2-1-2等值连接" class="headerlink" title="4.2.1.2等值连接"></a>4.2.1.2等值连接</h5><p>笛卡尔积表的关系上，选择所匹配字段值相等（=）的数据记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#法1：</span><br><span class="line">select * from emp join dept where emp.deptno = dept.deptno;</span><br><span class="line">#法2：</span><br><span class="line">select * from emp inner join dept where emp.deptno = dept.deptno;</span><br></pre></td></tr></table></figure><h5 id="4-2-1-3不等连接"><a href="#4-2-1-3不等连接" class="headerlink" title="4.2.1.3不等连接"></a>4.2.1.3不等连接</h5><p>笛卡尔积表的关系上，在连接条件中，可以使用其他比较运算符，比较被连接列的列值，如：<strong>&lt;、&gt;、!=等</strong>。</p><h4 id="4-2-2外连接-outer-join"><a href="#4-2-2外连接-outer-join" class="headerlink" title="4.2.2外连接(outer join)"></a>4.2.2<strong>外连接(outer join)</strong></h4><p>在笛卡尔积的数据记录中，不仅保留表关系中<font color="#ff0000"><strong>所有匹配的数据记录</strong></font>，而且还会<font color="#ff0000"><strong>保留部分不匹配的数据记录</strong></font>。</p><p>按照<strong>保留的数据</strong>分为：左外连接(left outer join)、右连接(right outer join)、全外连接(full outer jion)</p><h5 id="4-2-2-1左外连接-left-outer-join"><a href="#4-2-2-1左外连接-left-outer-join" class="headerlink" title="4.2.2.1左外连接(left outer join)"></a>4.2.2.1左外连接(left outer join)</h5><p>就是关联左边表中不匹配的数据记录 ,右表没有的用null表示。</p><p>left join/left outer join</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp left join dept on emp.deptno = dept.deptno;</span><br></pre></td></tr></table></figure><h5 id="4-2-2-2右连接-right-outer-join"><a href="#4-2-2-2右连接-right-outer-join" class="headerlink" title="4.2.2.2右连接(right outer join)"></a>4.2.2.2右连接(right outer join)</h5><p>就是关联右边表中不匹配的数据记录，左表没有的用null表示。</p><h5 id="4-2-2-3全外连接-full-outer-jion"><a href="#4-2-2-3全外连接-full-outer-jion" class="headerlink" title="4.2.2.3全外连接(full outer jion)"></a>4.2.2.3全外连接(full outer jion)</h5><p>就是关联左右边表中不匹配的数据记录</p><h4 id="4-2-3交叉连接-cross-join"><a href="#4-2-3交叉连接-cross-join" class="headerlink" title="4.2.3交叉连接 cross join"></a>4.2.3<strong>交叉连接</strong> cross join</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#没有where子句的交叉连接将产生连接表的笛卡尔积。</span><br><span class="line">select * from emp cross join dept;</span><br><span class="line">#和笛卡尔积一样</span><br><span class="line">select * from emp cross join dept where emp.deptno = dept.deptno;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySql数据库&quot;&gt;&lt;a href=&quot;#MySql数据库&quot; class=&quot;headerlink&quot; title=&quot;MySql数据库&quot;&gt;&lt;/a&gt;MySql数据库&lt;/h1&gt;&lt;h2 id=&quot;1-数据库概念&quot;&gt;&lt;a href=&quot;#1-数据库概念&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-2动态SQL实现</title>
    <link href="http://yoursite.com/2019/11/28/mybatis-2%E5%8A%A8%E6%80%81SQL%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/11/28/mybatis-2%E5%8A%A8%E6%80%81SQL%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-11-28T09:16:30.000Z</published>
    <updated>2020-01-16T09:10:21.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态SQL实现"><a href="#动态SQL实现" class="headerlink" title="动态SQL实现"></a>动态SQL实现</h1><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="lt-select-gt"><a href="#lt-select-gt" class="headerlink" title="&lt; select&gt;"></a>&lt; select&gt;</h3><h3 id="lt-if-gt"><a href="#lt-if-gt" class="headerlink" title="&lt; if&gt;"></a>&lt; if&gt;</h3><h3 id="lt-where-gt"><a href="#lt-where-gt" class="headerlink" title="&lt; where&gt;"></a>&lt; where&gt;</h3><h3 id="lt-set-gt"><a href="#lt-set-gt" class="headerlink" title="&lt; set&gt;"></a>&lt; set&gt;</h3><h3 id="lt-when-gt"><a href="#lt-when-gt" class="headerlink" title="&lt; when&gt;"></a>&lt; when&gt;</h3><h3 id="lt-otherwise-gt"><a href="#lt-otherwise-gt" class="headerlink" title="&lt; otherwise&gt;"></a>&lt; otherwise&gt;</h3><h3 id="lt-foreach-gt"><a href="#lt-foreach-gt" class="headerlink" title="&lt; foreach&gt;"></a>&lt; foreach&gt;</h3><h2 id="需要改变的地方"><a href="#需要改变的地方" class="headerlink" title="需要改变的地方"></a>需要改变的地方</h2><h3 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" </span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.uplooking.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"com.uplooking.bean.User"</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserLike"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span> <span class="attr">resultType</span>=<span class="string">"com.uplooking.bean.User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #&#123;&#125; 和$&#123;&#125; 的区别: $&#123;&#125;容易发生注入。尽量使用#&#123;&#125; 模糊查询时有两种方式查询 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式一：：： select * from user where name like #&#123;name&#125; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式二：：：  注意，，，这里的参数只能用    value    它是直接填参数的--&gt;</span></span><br><span class="line">select * from user where name like '%$&#123;value&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserWhere"</span> <span class="attr">parameterType</span>=<span class="string">"com.uplooking.bean.User"</span> <span class="attr">resultType</span>=<span class="string">"com.uplooking.bean.User"</span>&gt;</span></span><br><span class="line">select * from user where </span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span></span><br><span class="line">name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span></span><br><span class="line">and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.uplooking.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.uplooking.utils.SqlSessionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SqlSession session = SqlSessionUtil.getSqlSession(<span class="string">"sqlConfig.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询数据库</span></span><br><span class="line"><span class="comment">/*List&lt;User&gt; list = session.selectList("selectUsers");</span></span><br><span class="line"><span class="comment">for (User user : list) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(user);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模糊查询</span></span><br><span class="line">List&lt;User&gt; list = session.selectList(<span class="string">"selectUserLike"</span>,<span class="string">"小"</span>);</span><br><span class="line"><span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态sql测试</span></span><br><span class="line"><span class="comment">/*User user = new User("小凳子","123456");</span></span><br><span class="line"><span class="comment">List&lt;User&gt; lUsers = session.selectList("selectUserWhere", user);</span></span><br><span class="line"><span class="comment">for (User user2 : lUsers) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(user2);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取主键"><a href="#获取主键" class="headerlink" title="获取主键"></a>获取主键</h1><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p>​        当我们在写入数据到数据库数据的时候，有很多的时候要获取插入这条数据的主键。那么可以直接来获取：就使用mybatis里边进行<strong>配置</strong>之后就可以直接获取你的主键；</p><p>在进行<strong>插入数据</strong>的时候：  我们可以把你插入的这个数据的<strong>主键拿出来</strong>；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useGeneratedKeys="true" keyProperty="id"</span><br></pre></td></tr></table></figure><p>​        你的数据一旦插入成功之后； 我们可以通过获取主键的方式来获取刚刚插入的数据的主键；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.getId()<span class="comment">//返回主键</span></span><br></pre></td></tr></table></figure><p><strong>useGeneratedKeys=”true”</strong>  主键设置的时候是自动增长，设置类这个之后，我们会通过对象获取回来的注解就是数据中的主键； 如果没有他，就是你的对象的那个值，对象那个值为空；</p><p><strong>keyProperty=”userId”</strong>  表示将自增长后的Id赋值给实体类中的userId字段。</p><p>实体类中uerId 要有getter() and setter(); 方法</p><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>配置文件        </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.uplooking.bean.User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">SELECT LAST_INSERT_ID()</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.getId()<span class="comment">//返回主键</span></span><br></pre></td></tr></table></figure><h1 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态SQL实现&quot;&gt;&lt;a href=&quot;#动态SQL实现&quot; class=&quot;headerlink&quot; title=&quot;动态SQL实现&quot;&gt;&lt;/a&gt;动态SQL实现&lt;/h1&gt;&lt;h2 id=&quot;标签&quot;&gt;&lt;a href=&quot;#标签&quot; class=&quot;headerlink&quot; title=&quot;标</summary>
      
    
    
    
    
    <category term="动态sql" scheme="http://yoursite.com/tags/动态sql/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-1初学</title>
    <link href="http://yoursite.com/2019/11/28/mybatis-1%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/11/28/mybatis-1%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C/</id>
    <published>2019-11-28T08:39:26.000Z</published>
    <updated>2019-11-28T09:14:27.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​        MyBatis 是一款优秀的持久层（就是和数据库进行操作）框架，它支持定制化 SQL（就是我们自己可以编写sql）、存储过程（在数据库里边：  触发器：trigger（当你往木一个表中操作的时候（添加，删除，修改） 我们设置一个触发器，他在使用时候，就会触发一个事件，让另一个表中记录相关信息； 函数；在数据库中系统给我们提供了很多的函数（其实就是提前定义好的一些方法，然后调用方法即可完成具体的一些功能；max(）,count(),min()等等）；</p><p>​        我们自己还可以自己类定义函数，根据自己的需要编写函数进行操作；  存储过程；他和你的函数非常的相似，但是不是一定需要返回值，我们在进行操作的时候，原先是一次只能有一个sql，现在要完成多个sql的操作，并且带有循环，判断； 就需要我们写存储过程；就是把这一大堆的东西写在一个块里边； 这个块就存储过程；  用的时候直接调用； 针对你的存储过程的编写代码—-plsql编程；)以及高级映射（数据库中数据： 一对一，一对多，多对多的；一般我们数据库设计都会有这些关系；在mybatis我们可以使用编程的方式来完成你的  一对一，一对多，多对多的操作；）。</p><p>​        MyBatis 避免了几乎所有的 JDBC 代码（数据库加载驱动，建立连接，进行操作，回收资源）和手动设置参数（我们在操作的时候通过：给他传递参数；）以及获取结果集（resultset—这个是我们的结果集；）。MyBatis 可以使用简单的 XML（使用xml文件方式来进行配置mybaits） 或注解来配置和映射（映射文件）原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><h2 id="方式一：mybatis配置XML来实现对数据库的增删改查"><a href="#方式一：mybatis配置XML来实现对数据库的增删改查" class="headerlink" title="方式一：mybatis配置XML来实现对数据库的增删改查"></a>方式一：mybatis配置XML来实现对数据库的增删改查</h2><h3 id="创建项目步骤"><a href="#创建项目步骤" class="headerlink" title="创建项目步骤"></a>创建项目步骤</h3><h4 id="依赖pom-xml"><a href="#依赖pom-xml" class="headerlink" title="依赖pom.xml"></a>依赖pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="log4j文件配置-log4j-properties"><a href="#log4j文件配置-log4j-properties" class="headerlink" title="log4j文件配置(log4j.properties)"></a>log4j文件配置(log4j.properties)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Global logging configuration</span><br><span class="line"></span><br><span class="line">log4j.rootLogger=DEBUG, stdout</span><br><span class="line"># Console output...</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><h4 id="全局的配置文件-SqlMapConfig-xml"><a href="#全局的配置文件-SqlMapConfig-xml" class="headerlink" title="全局的配置文件(SqlMapConfig.xml)"></a>全局的配置文件(SqlMapConfig.xml)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"jdbc"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/hfc/dao/TableUserMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="mapper配置文件"><a href="#mapper配置文件" class="headerlink" title="mapper配置文件"></a>mapper配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" </span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.hfc.dao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectuser"</span> <span class="attr">resultType</span>=<span class="string">"com.hfc.bean.TableUser"</span>&gt;</span></span><br><span class="line">  select *from tableuser</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableUser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Double monery;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">getMonery</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> monery;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonery</span><span class="params">(Double monery)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.monery = monery;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dao层接口实现"><a href="#dao层接口实现" class="headerlink" title="dao层接口实现"></a>dao层接口实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TableUser</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectuser</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hfc.bean.TableUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resouse=<span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line"></span><br><span class="line">InputStream inputStream=Resources.getResourceAsStream(resouse);</span><br><span class="line">SqlSessionFactory sessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">SqlSession session=sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">List&lt;TableUser&gt; list=session.selectList(<span class="string">"selectuser"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (TableUser tableUser : list) &#123;</span><br><span class="line">System.out.println(tableUser.getId()+<span class="string">"\t"</span>+tableUser.getName()+<span class="string">"\t"</span>+tableUser.getMonery());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式二：mybatis使用注解实现对数据库的增删改查"><a href="#方式二：mybatis使用注解实现对数据库的增删改查" class="headerlink" title="方式二：mybatis使用注解实现对数据库的增删改查"></a>方式二：mybatis使用注解实现对数据库的增删改查</h2><h3 id="与XML配置方式不一样的地方"><a href="#与XML配置方式不一样的地方" class="headerlink" title="与XML配置方式不一样的地方"></a>与XML配置方式不一样的地方</h3><h4 id="mapper接口"><a href="#mapper接口" class="headerlink" title="mapper接口"></a>mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.uplooking.bean.TableUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TableUserMapper</span> </span>&#123;</span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from tableuser"</span>)</span><br><span class="line"><span class="function">List&lt;TableUser&gt; <span class="title">select</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Insert</span>(<span class="string">"insert into tableuser(name,money) values(#&#123;name&#125;,#&#123;money&#125;)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(TableUser tableUser)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Delete</span>(<span class="string">"delete from tableuser where id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Update</span>(<span class="string">"update tableuser set name=#&#123;name&#125;,money=#&#123;money&#125; where id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(TableUser tableUser)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="工具类-sqlSessionTools-java"><a href="#工具类-sqlSessionTools-java" class="headerlink" title="工具类(sqlSessionTools.java)"></a>工具类(sqlSessionTools.java)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionUtil</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">(String resurces)</span> </span>&#123;</span><br><span class="line">SqlSession session = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resurces);</span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">session = factory.openSession();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> session;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mybatis002;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.uplooking.bean.TableUser;</span><br><span class="line"><span class="keyword">import</span> com.uplooking.mapper.TableUserMapper;</span><br><span class="line"><span class="keyword">import</span> com.uplooking.utils.SqlSessionUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SqlSession sqlSession = SqlSessionUtil.getSqlSession(<span class="string">"sqlConfig.xml"</span>);</span><br><span class="line">TableUserMapper mapper = sqlSession.getMapper(TableUserMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment">List&lt;TableUser&gt; list = mapper.select();</span></span><br><span class="line"><span class="comment">sqlSession.commit();</span></span><br><span class="line"><span class="comment">for (TableUser tableUser : list) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(tableUser);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line"><span class="comment">e.printStackTrace();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加数据</span></span><br><span class="line"><span class="comment">/*TableUser tableUser = new TableUser("张三",100.0);</span></span><br><span class="line"><span class="comment">try &#123;</span></span><br><span class="line"><span class="comment">mapper.insert(tableUser);</span></span><br><span class="line"><span class="comment">sqlSession.commit();</span></span><br><span class="line"><span class="comment">&#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line"><span class="comment">e.printStackTrace();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line"><span class="comment">/*mapper.delete(9);</span></span><br><span class="line"><span class="comment">sqlSession.commit();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改数据</span></span><br><span class="line">TableUser tableUser = <span class="keyword">new</span> TableUser(<span class="number">11</span>,<span class="string">"王五"</span>,<span class="number">110.0</span>);</span><br><span class="line">mapper.update(tableUser);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mybatis&quot;&gt;&lt;a href=&quot;#mybatis&quot; class=&quot;headerlink&quot; title=&quot;mybatis&quot;&gt;&lt;/a&gt;mybatis&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概</summary>
      
    
    
    
    
    <category term="mybatis" scheme="http://yoursite.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>spring-6jdbc完成数据库事务操作</title>
    <link href="http://yoursite.com/2019/11/28/spring-6jdbc%E5%AE%8C%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/11/28/spring-6jdbc%E5%AE%8C%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C/</id>
    <published>2019-11-28T08:11:29.000Z</published>
    <updated>2020-01-01T05:52:10.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring事务操作"><a href="#spring事务操作" class="headerlink" title="spring事务操作"></a>spring事务操作</h1><h2 id="方式一：XML配置jdbc的jdbcTemplate–手动提交事务"><a href="#方式一：XML配置jdbc的jdbcTemplate–手动提交事务" class="headerlink" title="方式一：XML配置jdbc的jdbcTemplate–手动提交事务"></a>方式一：XML配置jdbc的jdbcTemplate–手动提交事务</h2><p>JdbcTemplate是Spring提供的访问数据库的方式之一，是Spring中最基本、最底层的访问数据库的实现方式。他是spring给我们弄出来的一个工具，来操作我们的数据</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="1-实体类"><a href="#1-实体类" class="headerlink" title="1.实体类"></a>1.实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableUser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Double monery;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">getMonery</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> monery;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonery</span><span class="params">(Double monery)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.monery = monery;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-bean-xml配置数据源、jdbcTemplate、注入dao层和service层"><a href="#2-bean-xml配置数据源、jdbcTemplate、注入dao层和service层" class="headerlink" title="2.bean.xml配置数据源、jdbcTemplate、注入dao层和service层"></a>2.bean.xml配置数据源、jdbcTemplate、注入dao层和service层</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:contexnt</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context-2.5.xsd"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">                      <span class="comment">&lt;!-- 引入文件的方式 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"config"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>c3p0.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="comment">&lt;!-- 引入一个的时候 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">         </span><br><span class="line">         <span class="comment">&lt;!-- 配置你的数据源(提供给我们后边这个jdbctemplete来) --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.driverClassName&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.url&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.username&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.password&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 利用jdbc的jdbcTemplate 来直接操作你的数据库 --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">            </span><br><span class="line">        <span class="comment">&lt;!-- 注入你的dao层的需要的  jdbcTemplate--&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"daoImpl"</span> <span class="attr">class</span>=<span class="string">"com.hfc.dao.DaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">         <span class="comment">&lt;!-- 注入的是你的service层的需要daoImpl --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.hfc.service.ServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"daoImpl"</span> <span class="attr">ref</span>=<span class="string">"daoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-创建dao层和接口层"><a href="#3-创建dao层和接口层" class="headerlink" title="3.创建dao层和接口层"></a>3.创建dao层和接口层</h4><p>service类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.StringHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hfc.entity.TableUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoImpl</span> <span class="keyword">implements</span> <span class="title">Dao</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql=<span class="string">"insert into tableuser(name,monery) values(?,?)"</span>;</span><br><span class="line"><span class="keyword">int</span> row=jdbcTemplate.update(sql, <span class="string">"小狗狗"</span>,<span class="number">2000.0</span>);</span><br><span class="line">System.out.println(<span class="string">"有"</span>+row+<span class="string">"行数据进入数据库！！！！！！！！！！"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String sql=<span class="string">"delete from tableuser where id=?"</span>;</span><br><span class="line"><span class="keyword">int</span> row=jdbcTemplate.update(sql, <span class="number">897</span>);</span><br><span class="line">System.out.println(<span class="string">"有"</span>+row+<span class="string">"行数据从数据库 删除了！！！！！！！！！！"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String sql=<span class="string">"select *from tableuser"</span>;</span><br><span class="line">RowMapper&lt;TableUser&gt; reMapper=<span class="keyword">new</span> BeanPropertyRowMapper&lt;TableUser&gt;(TableUser.class );</span><br><span class="line">List&lt;TableUser&gt; list=jdbcTemplate.query(sql, reMapper);</span><br><span class="line"><span class="comment">// springjdbctemplete是可以把我们数据库查的数据直接转化到你的对象上；</span></span><br><span class="line"><span class="keyword">for</span> (TableUser tableUser : list) &#123;</span><br><span class="line">    System.out.println(tableUser.getId()+<span class="string">"\t"</span>+tableUser.getName()+<span class="string">"\t"</span>+tableUser.getMonery());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String sql=<span class="string">"update tableuser set name=? where id=?"</span> ;</span><br><span class="line"><span class="keyword">int</span> row=jdbcTemplate.update(sql, <span class="string">"zhangsan"</span>,<span class="number">895</span>);</span><br><span class="line">System.out.println(<span class="string">"有"</span>+row+<span class="string">"行数据从数据库 修改！！！！！！！！！！"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式二：XML配置实现jdbcTemplate自动提交事务"><a href="#方式二：XML配置实现jdbcTemplate自动提交事务" class="headerlink" title="方式二：XML配置实现jdbcTemplate自动提交事务"></a>方式二：XML配置实现jdbcTemplate自动提交事务</h2><h3 id="pom-xml需要增加的内容"><a href="#pom-xml需要增加的内容" class="headerlink" title="pom.xml需要增加的内容"></a>pom.xml需要增加的内容</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 要完成事务的操作，需要我们在切面上进行配置 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="c3p0-properties"><a href="#c3p0-properties" class="headerlink" title="c3p0.properties"></a>c3p0.properties</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/test</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure><h3 id="bean-xml"><a href="#bean-xml" class="headerlink" title="bean.xml"></a>bean.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 引入文件的方式 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"config"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>c3p0.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="comment">&lt;!-- 引入一个的时候 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">          </span><br><span class="line">      <span class="comment">&lt;!-- 配置你的数据源 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.driverClassName&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.url&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.username&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;jdbc.password&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 不需要配置jdbctemplete ，因为我们继承JdbcDaoSupport --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"daoImpl"</span> <span class="attr">class</span>=<span class="string">"com.hfc.dao.DaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- service里边有需要我们dao 需要注入你的daoImpl --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serviceImpl"</span> <span class="attr">class</span>=<span class="string">"com.hfc.service.ServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"daoImpl"</span> <span class="attr">ref</span>=<span class="string">"daoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 以上进行数据库的操作 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 接下来配置事务 --&gt;</span></span><br><span class="line">        </span><br><span class="line">                </span><br><span class="line">       <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 5.配置事务模板,依赖事务核心管理器（4） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 6.配置事务通知,依赖事务核心管理器（4） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对那个方法进行事务的管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transf"</span>  <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 7.配置织入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.hfc.service.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"txpc"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txpc"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="dao层实现"><a href="#dao层实现" class="headerlink" title="dao层实现"></a>dao层实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.support.JdbcDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">Dao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMoney</span><span class="params">(Double money, Integer id)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">getJdbcTemplate().update(<span class="string">"update tableuser set monery=monery+? where id=? "</span>, money,id);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduceMoney</span><span class="params">(Double money, Integer id)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">getJdbcTemplate().update(<span class="string">"update tableuser set monery=monery-? where id=? "</span>, money,id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式三：注解配置事务"><a href="#方式三：注解配置事务" class="headerlink" title="方式三：注解配置事务"></a>方式三：注解配置事务</h2><h3 id="bean-xml-1"><a href="#bean-xml-1" class="headerlink" title="bean.xml"></a>bean.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--自动扫描 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hfc"</span> /&gt;</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">&lt;!-- 读取db.properties配置信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 配置一个C3P0数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 配置一个JdbcTemplate，用来操作数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">               <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 使得事务注解生效 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dao层实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>  <span class="comment">//我们把这个作为你的bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoImpl</span> <span class="keyword">implements</span> <span class="title">Dao</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String sql=<span class="string">"insert into tableuser(name,monery) values('张狗袜子',3000.0)"</span>;</span><br><span class="line"><span class="keyword">int</span> row=jdbcTemplate.update(sql);</span><br><span class="line">System.out.println(row);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spring事务操作&quot;&gt;&lt;a href=&quot;#spring事务操作&quot; class=&quot;headerlink&quot; title=&quot;spring事务操作&quot;&gt;&lt;/a&gt;spring事务操作&lt;/h1&gt;&lt;h2 id=&quot;方式一：XML配置jdbc的jdbcTemplate–手动提交事务</summary>
      
    
    
    
    
    <category term="spring事务操作" scheme="http://yoursite.com/tags/spring事务操作/"/>
    
  </entry>
  
  <entry>
    <title>spring-5AOP相关and模拟切面</title>
    <link href="http://yoursite.com/2019/11/28/spring-5AOP%E7%9B%B8%E5%85%B3and%E6%A8%A1%E6%8B%9F%E5%88%87%E9%9D%A2/"/>
    <id>http://yoursite.com/2019/11/28/spring-5AOP%E7%9B%B8%E5%85%B3and%E6%A8%A1%E6%8B%9F%E5%88%87%E9%9D%A2/</id>
    <published>2019-11-28T06:57:50.000Z</published>
    <updated>2020-01-16T09:17:57.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​        SpringAOP是继spring ioc的 spring 的一大特点。他也是spring框架的核心内容。Aop是一种思想。只要符合aop思想的技术就都是aop的实现。Aop是建立在Java的动态代理机制之上（静态代理和动态代理；），spring是最受欢迎的的框架。</p><p>代理模式：就是java里边的设计模式的一种；代理模式分为： 动态代理和静态代理：</p><p>​    静态代理：（就是我们一个人想要做一个事情但是我们自己做不了，我们就找一个代理（中介）代理帮我们去完成具体的联系，具体的关系建立之后，我们就可以完成具体的操作；）</p><p><strong>静态代理</strong>： 就是代理是从开始我们就已经知道是那个代理，他不会变化；</p><p><strong>动态代理</strong>： 我们在进行操作的时候才知道我们的代理是谁，不是规定死；</p><p><strong>Spring aop的实现原理也是—动态代理</strong>；</p><p>编译时增强： 静态代理。当你的程序被编译的时候；代理类就创建了；</p><p>运行时增强：动态代理。 当你程序在运行的时候，才知道你的代理类是谁；</p><p>Aop里边的基本概念：</p><p><strong>切面（Aspect）</strong>：其实就是共有功能的实现。如日志切面、权限切面、事务切面等。在实际应用中通常是一个存放共有功能实现的普通Java类，之所以能被AOP容器识别成切面，是在配置中指定的。</p><p><strong>通知（Advice）</strong>：是切面的具体实现。以目标方法为参照点，根据放置的地方不同，可分为前置通知（Before）、后置通知（AfterReturning）、异常通知（AfterThrowing）、最终通知（After）与环绕通知（Around）5种。在实际应用中通常是切面类中的一个方法，具体属于哪类通知，同样是在配置中指定的。—其实也就是一个拦截器</p><p><strong>连接点**</strong>（）<strong>**（Joinpoint）</strong>：就是程序在运行过程中能够插入切面的地点。例如，方法调用、异常抛出或字段修改等，但Spring只支持方法级的连接点。</p><p><strong>切入点（Pointcut）</strong>：用于定义通知应该切入到哪些连接点上。不同的通知通常需要切入到不同的连接点上，这种精准的匹配是由切入点的正则表达式来定义的。</p><p><strong>目标对象（Target）</strong>：就是那些即将切入切面的对象，也就是那些被通知的对象。这些对象中已经只剩下干干净净的核心业务逻辑代码了，所有的共有功能代码等待AOP容器的切入。</p><p><strong>代理对象（Proxy）</strong>：将通知应用到目标对象之后被动态创建的对象。可以简单地理解为，代理对象的功能等于目标对象的核心业务逻辑功能加上共有功能。代理对象对于使用者而言是透明的，是程序运行过程中的产物。</p><p><strong>织入（Weaving）</strong>：将切面应用到目标对象从而创建一个新的代理对象的过程。这个过程可以发生在编译期、类装载期及运行期，当然不同的发生点有着不同的前提条件。譬如发生在编译期的话，就要求有一个支持这种AOP实现的特殊编译器；发生在类装载期，就要求有一个支持AOP实现的特殊类装载器；只有发生在运行期，则可直接通过Java语言的反射机制与动态代理机制来动态实现。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>AOP用来封装横切关注点（切面），具体可以在下面的场景中使用</p><p>Authentication 权限</p><p>Caching 缓存</p><p>Context passing 内容传递</p><p>Error handling 错误处理</p><p>Lazy loading 懒加载</p><p>Debugging 调试</p><p>logging, tracing, profiling and monitoring 记录跟踪 优化 校准</p><p>Performance optimization 性能优化</p><p>Persistence 持久化</p><p>Resource pooling 资源池</p><p>Synchronization 同步</p><p><strong>Transactions 事务</strong></p><h2 id="模拟切面程序实现"><a href="#模拟切面程序实现" class="headerlink" title="模拟切面程序实现"></a>模拟切面程序实现</h2><p>​        Aop可以把和业务无关的代码进行分离。日志输出与方法之间是没有关系的，上面的那种方法是先调用方法，才能看到日志。这里的主要目的就是执行方法，而不是执行日志。使用aop使得日志和方法分离，在调用目标方法的时候执行日志输出。</p><h3 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个是一个切面：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerExecute</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 动态调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">before();</span><br><span class="line">invocation.proceed();  <span class="comment">//拦截器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前置通知</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"程序开始---前置通知开始，在你的切面上我们写了前置通知，当你请求一过来的时候就会触发前置通知！！！！！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主流业务"><a href="#主流业务" class="headerlink" title="主流业务"></a>主流业务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个是你的主流的业务</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String name)</span></span>&#123;<span class="comment">//执行方法</span></span><br><span class="line">System.out.println(<span class="string">"目标对象---程序开始执行，这个是我们的主流的业务："</span>+name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute01</span><span class="params">(String name)</span></span>&#123;<span class="comment">//执行方法</span></span><br><span class="line">System.out.println(<span class="string">"目标对象---程序开始执行，这个是我们的主流的业务！！！！！！！！！！！！："</span>+name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">Target target=new Target();//创建一个主流业务的对象</span><br><span class="line">ProxyFactory proxyFactory=new ProxyFactory();//代理工厂</span><br><span class="line">proxyFactory.addAdvice(new LoggerExecute());// 代理工厂给你的那个切面做代理</span><br><span class="line">proxyFactory.setTarget(target);//代理工厂把你的主流业务也建立联系</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Target target2=(Target)proxyFactory.getProxy();</span><br><span class="line"></span><br><span class="line">target2.execute(&quot;pan金莲&quot;);</span><br><span class="line">target2.execute01(&quot;小狗狗&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pring-aop通知-advice-类别"><a href="#pring-aop通知-advice-类别" class="headerlink" title="pring aop通知(advice)类别"></a>pring aop通知(advice)类别</h2><p>spring aop通知(advice)分成五类： </p><h3 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h3><p><strong>前置通知[Before advice]</strong>：在连接点前面执行，前置通知不会影响连接点的执行，除非此处抛出异常。 （就像你进入自动取款机之前，他会通知你欢迎光临）</p><h3 id="后置返回通知"><a href="#后置返回通知" class="headerlink" title="后置返回通知"></a>后置返回通知</h3><p><strong>后置返回通知[After returning advice]</strong>：在连接点正常执行完成后执行，如果连接点抛出异常，则不会执行。事务操作等等 （就是你作完自己的业务后，他就会提醒欢迎下次光临）</p><h3 id="异常返回通知"><a href="#异常返回通知" class="headerlink" title="异常返回通知"></a>异常返回通知</h3><p><strong>异常返回通知[After throwing advice]</strong>：在连接点抛出异常后执行。 （取款过程中出现了异常，停电报警；）</p><h3 id="返回通知"><a href="#返回通知" class="headerlink" title="返回通知"></a>返回通知</h3><p><strong>返回通知[After (finally) advice]</strong>：在连接点执行完成后执行，不管是正常执行完成，还是抛出异常，都会执行返回通知中的内容。 （就是你取款成功或者不成功他都会欢迎你光临）</p><h3 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h3><p><strong>环绕通知[Around advice]</strong>：环绕通知围绕在连接点前后，比如一个方法调用的前后。这是最强大的通知类型，能在方法调用前后自定义一些操作。环绕通知还需要负责决定是继续处理join point(调用ProceedingJoinPoint的proceed方法)还是中断执行。 </p><h2 id="spring实现AOP的方式（4种）"><a href="#spring实现AOP的方式（4种）" class="headerlink" title="spring实现AOP的方式（4种）"></a>spring实现AOP的方式（4种）</h2><p>Spring提供了4种实现AOP的方式：<br>1.经典的基于代理的AOP—-自己写代理的方式来完成aop的实现<br>2.@AspectJ注解驱动的切面—这个是使用注解的方式来实现你的aop操作；<br>3.纯POJO切面<br>4.注入式AspectJ切面</p><p><img src="https://i.loli.net/2020/01/16/5dEBnJOLPswNGeD.png" alt="error"></p><h3 id="使用bean-xml配置–程序实现步骤"><a href="#使用bean-xml配置–程序实现步骤" class="headerlink" title="使用bean.xml配置–程序实现步骤"></a>使用bean.xml配置–程序实现步骤</h3><p>步骤:</p><ol><li>定义接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>编写对象(被代理对象=目标对象)—主流业务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hfc.service.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> <span class="keyword">implements</span> <span class="title">Service</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过spring给在注入点值进来；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个就是你的主流业务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"这个是你的主流业务， 然后启动！！！！！！"</span>+name);</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>编写通知（前置通知目标方法调用前调用）</p><p><strong>后置通知</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterAdvice</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"当前后置通知已经启动！！！"</span>+method.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>环绕通知</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AroundAdivce</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"我是一个环绕通知，现在执行的是通知中的前置通知！！！！！！@@@@@@"</span>);</span><br><span class="line">     invocation.proceed();</span><br><span class="line">    System.out.println(<span class="string">"我是一个环绕通知，现在执行的是通知中的houzhi通知！！！！！*&amp;*********"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>前置通知</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeforeAdvice</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"前置通知 已经启动，打印你的日志--------"</span>+method.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>异常通知</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsAdvice</span> <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">aop</span>.<span class="title">ThrowsAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Method m,Object[] os,Object target,Exception e)</span> </span>&#123;  </span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"出异常了..."</span>+e.getMessage());  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>在beans.xml文件配置</p><p>​    4.1 配置 被代理对象=目标对象</p><p>​    4.2 配置通知</p><p>​    4.3 配置代理对象 是 ProxyFactoryBean的对象实例</p><p>​        4.3.1 <!-- 代理接口集 --></p><p>​        4.3.2 织入通知</p><p>​        4.3.3 配置被代理对象</p></li></ol><p><strong>bean.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serviceImpl"</span> <span class="attr">class</span>=<span class="string">"com.hfc.service.impl.ServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhansgan123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 注入通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beforeAdvice"</span> <span class="attr">class</span>=<span class="string">"com.hfc.advice.BeforeAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"afterAdvice"</span> <span class="attr">class</span>=<span class="string">"com.hfc.advice.AfterAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aroundAdivce"</span> <span class="attr">class</span>=<span class="string">"com.hfc.advice.AroundAdivce"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"throwsAdvice"</span> <span class="attr">class</span>=<span class="string">"com.hfc.advice.ThrowsAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置你的代理工厂 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"proxyFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">     <span class="comment">&lt;!-- 代理接口（给谁做代理） --&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyInterfaces"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.hfc.service.Service<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">      <span class="comment">&lt;!-- 把通知织入到代理对象  --&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>beforeAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>afterAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>aroundAdivce<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>throwsAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 配置被代理对象,可以指定 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"serviceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用注解实现切面"><a href="#使用注解实现切面" class="headerlink" title="使用注解实现切面"></a>使用注解实现切面</h2><p>使用springaop使用注解的方式来进行配置：</p><p>使用@ascept这个注解完成我们的这个aop；</p><p>1.pom.xml配置</p><p>导入你的ascept的包；</p><p><strong>pom.xml必须导入AOP相关包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bean.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"  </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans  </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans-2.0.xsd  </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop  </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop-2.0.xsd"</span>&gt;</span> </span><br><span class="line">       </span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"monkey"</span> <span class="attr">class</span>=<span class="string">"com.uplooking.bean.Monkey"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"guardian"</span> <span class="attr">class</span>=<span class="string">"com.uplooking.bean.Guardian"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">          <span class="comment">&lt;!-- 支持你的 aspectj--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line">       </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.主流业务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个是一个猴子，他就相当我们的主流业务；他要去完成具体的操作；偷东西的方法；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Monkey</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stealPeaches</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是一只猴子，我的名字是：\t"</span>+name+<span class="string">"\t我要去偷桃子！！！！！"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是一只漂亮的猴子"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.切面</p><p>使用@Aspect注解将一个java类定义为切面类</p><p>使用@Pointcut定义一个切入点，可以是一个规则表达式，比如下例中某个package下的所有函数，也可以是一个注解等。</p><p>根据需要在切入点不同位置的切入内容</p><p>使用@Before在切入点开始处切入内容</p><p>使用@After在切入点结尾处切入内容</p><p>使用@AfterReturning在切入点return内容之后切入内容（可以用来对处理返回值做一些加工处理）</p><p>使用@Around在切入点前后切入内容，并自己控制何时执行切入点自身的内容</p><p>使用@AfterThrowing用来处理当切入内容部分抛出异常之后的处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这就是一个院子的守护者，他就相当是一个切面，只要猴子到这个院子，就触发事件；</span></span><br><span class="line"><span class="meta">@Aspect</span>    <span class="comment">//加上这个注解的时候代表这个类是一个 切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Guardian</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.hfc.Monkey.stealPeaches(..))"</span>)  <span class="comment">//切入点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foudMonkey</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span>(value = <span class="string">"foudMonkey()"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foundBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">"我是一个院子的看守者，在这里抓贼，但是前提是一定要悄悄的！！！！"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around</span>(value =<span class="string">"foudMonkey()"</span> )</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Around</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"环绕通知启动！！！！！！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning</span>(value = <span class="string">"foudMonkey() &amp;&amp; args(name,..)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foundAfter</span><span class="params">(String name )</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我现抓住了一只猴子他的名字是:"</span>+name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AOP&quot;&gt;&lt;a href=&quot;#AOP&quot; class=&quot;headerlink&quot; title=&quot;AOP&quot;&gt;&lt;/a&gt;AOP&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    
    <category term="aop" scheme="http://yoursite.com/tags/aop/"/>
    
  </entry>
  
  <entry>
    <title>spring-4自动装配模式and与数据库连接</title>
    <link href="http://yoursite.com/2019/11/28/spring-4%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%BC%8Fand%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
    <id>http://yoursite.com/2019/11/28/spring-4%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%BC%8Fand%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</id>
    <published>2019-11-28T03:15:31.000Z</published>
    <updated>2020-01-16T09:17:13.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring的5种制动装配模式"><a href="#spring的5种制动装配模式" class="headerlink" title="spring的5种制动装配模式"></a>spring的5种制动装配模式</h1><p>1.no          　　——默认情况下，不自动装配，通过“ref”attribute手动设定。</p><p>2.ByName       ——根据Property的Name自动装配，如果一个bean的name，和另一个bean中的Property的name相同，则自动装配这个bean到Property中。</p><p>3.byType   　　——根据Property的数据类型（Type）自动装配，如果一个bean的数据类型，兼容另一个bean中Property的数据类型，则自动装配。</p><p>4.constructor   ——根据构造函数参数的数据类型，进行byType模式的自动装配。</p><p>5.autodetect   ——如果发现默认的构造函数，用<strong>constructor</strong>模式，否则，用<strong>byType</strong>模式。</p><h2 id="默认No（不会自动装配）"><a href="#默认No（不会自动装配）" class="headerlink" title="默认No（不会自动装配）"></a>默认No（不会自动装配）</h2><p>默认情况下，set注入的方式，需要通过’ref’来装配bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dog"</span> <span class="attr">ref</span>=<span class="string">"dog"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h2><p>​        根据属性Property的名字装配bean，这种情况，<em>printlnInfo</em>设置了autowire=”byName”，Spring会自动寻找与属性名字“<em>user</em>”相同的bean，找到后，通过调用setName(String name)将其注入属性。</p><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>1.Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bean-xml配置"><a href="#bean-xml配置" class="headerlink" title="bean.xml配置"></a>bean.xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.uplooking.bean.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"111111111"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"summer"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 命名必须匹配 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- autowire="byName" --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.uplooking.bean.Student"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>1.工具包 ApplicationContextUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextUtil</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ApplicationContextUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//单例模式 每个IOC容器对象唯一</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getContext</span><span class="params">(String xmlName)</span> </span>&#123;</span><br><span class="line">context = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlName);</span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.uplooking.bean.Student;</span><br><span class="line"><span class="keyword">import</span> com.uplooking.utils.ApplicationContextUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ApplicationContext context = ApplicationContextUtil.getContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">Student student = context.getBean(<span class="string">"student"</span>,Student.class);</span><br><span class="line">System.out.println(student.getUser());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h2><p>​        根据属性Property的类型装配bean，这种情况，<em>printlnInfo</em>设置了autowire=”<strong>byType</strong> “，Spring会自动寻找与属性名字“<em>user</em>”相同的bean，找到后，通过调用setName(String name)将其注入属性。</p><p>​        如果配置文件中有两个类型相同的bean会怎样呢？</p><p>一旦配置如上，有两种相同数据类型的bean被配置，将抛出UnsatisfiedDependencyException异常，所以，一旦选择了’byType’类型的自动装配，请确认你的配置文件中每个数据类型定义一个唯一的bean。</p><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>这种情况下，Spring会寻找与参数数据类型相同的bean，通过构造函数将其注入。</p><h2 id="autodetect"><a href="#autodetect" class="headerlink" title="autodetect"></a>autodetect</h2><p>​        这种情况下，Spring会先寻找printlnInfo中是否有默认的构造函数，如果有相当于上边的<strong>’constructor’</strong>这种情况，用构造函数注入，否则，用’<strong>byType</strong>’这种方式注入。</p><h1 id="spring数据库连接"><a href="#spring数据库连接" class="headerlink" title="spring数据库连接"></a>spring数据库连接</h1><h2 id="使用XML手工注入"><a href="#使用XML手工注入" class="headerlink" title="使用XML手工注入"></a>使用XML手工注入</h2><p>bean.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一种通过bean类来注入 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id="jdbcBean" class="com.uplooking.bean.JDBCConnectionBean"&gt;</span></span><br><span class="line"><span class="comment">    &lt;property name="driver" value="com.mysql.cj.jdbc.Driver"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;property name="url" value="jdbc:mysql://localhost:3306/employee"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;property name="user" value="root"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;property name="password" value="summer"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt; --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用外置配置文件（Properties）"><a href="#使用外置配置文件（Properties）" class="headerlink" title="使用外置配置文件（Properties）"></a>使用外置配置文件（Properties）</h2><h3 id="引入外部的配置文件两种方式"><a href="#引入外部的配置文件两种方式" class="headerlink" title="引入外部的配置文件两种方式"></a>引入外部的配置文件两种方式</h3><p>(1)使用context:property-placeholder 标签引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:com/util/db.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>(2)xml文件注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--(2) com/util/db.properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbcPro.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用不同的数据库连接池"><a href="#使用不同的数据库连接池" class="headerlink" title="使用不同的数据库连接池"></a>使用不同的数据库连接池</h3><h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过properties：第一种方式：使用JDBC 。。。使用占位符$表示properties文件中的变量 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id="jdbcBean" class="com.uplooking.bean.JDBCConnectionBean"&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="user" value="$&#123;user&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="url" value="$&#123;url&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="driver" value="$&#123;driver&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="password" value="$&#123;password&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt; --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过properties：第二种方式：使用C3P0。。。。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id="jdbcBean" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="user" value="$&#123;user&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="jdbcUrl" value="$&#123;url&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="driverClass" value="$&#123;driver&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="password" value="$&#123;password&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;  --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcBean"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></span><br><span class="line"><span class="tag"><span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;user&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类实现（关键部分）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DruidDataSource dataSource=app.getBean(<span class="string">"dataSource01"</span>, DruidDataSource.class);</span><br></pre></td></tr></table></figure><h1 id="spring中bean的作用域（装配bean）"><a href="#spring中bean的作用域（装配bean）" class="headerlink" title="spring中bean的作用域（装配bean）"></a>spring中bean的作用域（装配bean）</h1><h2 id="bean标签的属性"><a href="#bean标签的属性" class="headerlink" title="bean标签的属性"></a>bean标签的属性</h2><h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><p>1）scope：用来配置spring bean的作用域 他在你的bean 的属性中去进行配置；</p><h3 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h3><p>2）singleton：表示bean为单例的（默认我们的spring下的bean都是你的单例）</p><h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><p>3）abstract：设置为true，将该bean仅仅作为模板使用，应用程序上下文不会试图预先初始化它</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user02"</span> <span class="attr">class</span>=<span class="string">"com.hfc.collection.User"</span> <span class="attr">abstract</span>=<span class="string">"true"</span> &gt;</span></span><br></pre></td></tr></table></figure><h3 id="lazy-init"><a href="#lazy-init" class="headerlink" title="lazy-init"></a>lazy-init</h3><p>4）lazy-init：设为true，延迟加载（懒加载）bean不会在ApplicationContext启动时提前被实例化，而是第一次向容器通过getBean索取bean时实例化（你需要时候我给你创建，你不需要的时候我不创建；）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user02"</span> <span class="attr">class</span>=<span class="string">"com.hfc.collection.User"</span> <span class="attr">lazy-init</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line">注：只对singleton的bean起作用</span><br></pre></td></tr></table></figure><h3 id="autowire"><a href="#autowire" class="headerlink" title="autowire"></a>autowire</h3><p>5）autowire：自动装配</p><h3 id="dependency-check"><a href="#dependency-check" class="headerlink" title="dependency-check"></a>dependency-check</h3><p>6）dependency-check：依赖检查</p><h3 id="depends-on"><a href="#depends-on" class="headerlink" title="depends-on"></a>depends-on</h3><p>7）depends-on：表示一个bean的实例化依靠另一个bean先实例化</p><h3 id="autowire-candidate"><a href="#autowire-candidate" class="headerlink" title="autowire-candidate"></a>autowire-candidate</h3><p>8）autowire-candidate：设为false，容器在查找自动装配对象时，将不考虑该bean，即它不会被考虑作为其他bean自动装配的候选者，但是该bean本身可以使用自动装配来注入其他bean</p><h3 id="primary"><a href="#primary" class="headerlink" title="primary"></a>primary</h3><p>9）primary：该bean优先被注入</p><h3 id="init-method"><a href="#init-method" class="headerlink" title="init-method"></a>init-method</h3><p>10）init-method：初始化bean时调用的方法</p><h3 id="destory-method"><a href="#destory-method" class="headerlink" title="destory-method"></a>destory-method</h3><p>11）destory-method：容器销毁之前所调用的方法</p><h3 id="factory-method"><a href="#factory-method" class="headerlink" title="factory-method"></a>factory-method</h3><p>12）factory-method：当调用factory-method所指向的方法时，才开始实例化bean</p><h3 id="factory-bean"><a href="#factory-bean" class="headerlink" title="factory-bean"></a>factory-bean</h3><p>13）factory-bean：调用静态工厂方法的方式创建bean</p><h2 id="bean的子元素"><a href="#bean的子元素" class="headerlink" title="bean的子元素"></a>bean的子元素</h2><h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><p>1）meta：元数据，当需要使用里面的信息时可以通过key获取</p><h3 id="lookup-method"><a href="#lookup-method" class="headerlink" title="lookup-method"></a>lookup-method</h3><p>2）lookup-method：获取器注入，是把一个方法声明为返回某种类型的bean但实际要返回的bean是在配置文件里面配置的</p><h3 id="replaced-method"><a href="#replaced-method" class="headerlink" title="replaced-method"></a>replaced-method</h3><p>3）replaced-method：可以在运行时调用新的方法替换现有的方法，还能动态的更新原有方法的逻辑</p><h3 id="constructor-arg"><a href="#constructor-arg" class="headerlink" title="constructor-arg"></a>constructor-arg</h3><p>4）constructor-arg：对bean自动寻找对应的构造函数，并在初始化的时候将设置的参数传入进去</p><h3 id="property"><a href="#property" class="headerlink" title="property"></a>property</h3><p>5）property：基本数据类型赋值</p><h3 id="qualifier"><a href="#qualifier" class="headerlink" title="qualifier"></a>qualifier</h3><p>6）qualifier：通过Qualifier指定注入bean的名称</p><h1 id="servlet的时候就提到作用域："><a href="#servlet的时候就提到作用域：" class="headerlink" title="servlet的时候就提到作用域："></a>servlet的时候就提到作用域：</h1><h2 id="九大内置对象："><a href="#九大内置对象：" class="headerlink" title="九大内置对象："></a>九大内置对象：</h2><p>九大内置对象：</p><p>1、out 来源于<a href="http://lib.csdn.net/base/17" target="_blank" rel="noopener">Java</a>.io.Writer类，它用于发送输出流到客户端。<br>2、request 来源于javax.servlet.http.HttpServletRequest接口。它被关联到每一个HTTP请求。<br>3、response 来源于javax.servlet.http.HttpServletResponse。response对象用于把取得的数据返回到客户端。<br>4、pageContext 提供访问JSP页面的命名空间。它也提供用来访问其他的JSP隐含对象。<br>5、session 来源于javax.servlet.http.HttpSession。它用于存储客户端请求的信息，因此它是有状态交互式的。<br>6、application 来源于javax.servlet.ServletContext。<br>7、config 来源于ServletConfig，它包含了当前JSP/Servlet所在的WEB应用的配置信息。<br>8、page 来源于当前被访问JSP页面的实例化。它实际使用的是JSP转换成的Servlet。<br>9、exception 用于捕获JSP抛出的异常。它只有在JSP页面属性isErrorPage=true时才可用。</p><h2 id="四大作用域："><a href="#四大作用域：" class="headerlink" title="四大作用域："></a>四大作用域：</h2><p>四大作用域：<strong>四个作用域：request域  session域  application域  page域</strong></p><h1 id="spring作用域"><a href="#spring作用域" class="headerlink" title="spring作用域"></a>spring作用域</h1><p>在Spring 容器当中，一共提供了5种作用域类型，在配置文件中，通过属性scope来设置bean的作用域范围。—可以去查看spring的帮助文档</p><h3 id="singleton-1"><a href="#singleton-1" class="headerlink" title="singleton"></a>singleton</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userInfo"</span> <span class="attr">class</span>=<span class="string">"com .Linksky.UserInfo"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当Bean的作用域为singleton的时候,Spring容器中只会存在一个共享的Bean实例，所有对Bean的请求只要id与bean的定义相匹配，则只会返回bean的同一实例。单一实例会被存储在单例缓存中，为Spring的缺省（默认的作用）作用域。</p><p>当Spring中一个bean的作用域为singleton时, 那么Spring IoC容器中只会存在一个共享的该bean实例，并且所有对该bean的引用，只要id与该bean定义相匹配，则只会返回bean的单一实例。这就好比一个教室中的饮水机，在教室中的每个学生都可以使用这个饮水机，对于教室这个容器来说，饮水机就是一个作用域为singleton的bean。</p><p>​      作用域为singleton的bean它的生命周期与Spring IoC容器是一致的，该bean在容器初始化的时候被创建，然后将被一直保留到容器中，当容器销毁后，bean也将被销毁。通常情况下如果不指定bean的作用域，默认将被设置成singleton作用域。</p><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userInfo"</span> <span class="attr">class</span>=<span class="string">"cn.lovepi.UserInfo"</span> <span class="attr">scope</span>=<span class="string">" prototype "</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 每次对该Bean请求的时候，Spring IoC都会创建一个新的作用域。</p><p>我们每次创建对象都是新的对象，不是共享的对象；</p><p><strong>对于有状态的Bean应该使用prototype，对于无状态的Bean则使用singleton</strong></p><p><img src="https://i.loli.net/2020/01/16/9gnO76XtAK3IQYi.png" alt="error"></p><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userInfo"</span> <span class="attr">class</span>=<span class="string">"cn.lovepi.UserInfo"</span> <span class="attr">scope</span>=<span class="string">" request "</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Request作用域针对的是每次的Http请求，Spring容器会根据相关的Bean的</p><p>定义来创建一个全新的Bean实例。而且该Bean只在当前request内是有效的。</p><p>这个我们写成web项目时候，要加入监听器，当监听器监听到request里边发生变化的时候，就会就是操作的这个域对象；</p><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userInfo"</span> <span class="attr">class</span>=<span class="string">"cn.lovepi.UserInfo"</span> <span class="attr">scope</span>=<span class="string">" session "</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>针对http session起作用，Spring容器会根据该Bean的定义来创建一个全新的Bean的实例。而且该Bean只在当前http session内是有效的。</p><h3 id="global-session"><a href="#global-session" class="headerlink" title="global session"></a>global session</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userInfo"</span> <span class="attr">class</span>=<span class="string">"cn.lovepi.UserInfo"</span><span class="attr">scope</span>=<span class="string">“globalSession</span>"&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>类似标准的http session作用域，不过仅仅在基于portlet的web应用当中才有意义。Portlet规范定义了全局的Session的概念。他被所有构成某个portlet外部应用中的各种不同的portlet所共享。在global session作用域中所定义的bean被限定于全局的portlet session的生命周期范围之内。</p><h1 id="spring注解注入"><a href="#spring注解注入" class="headerlink" title="spring注解注入"></a>spring注解注入</h1><p>@<strong>RunWith</strong> 运行器，Spring中通常用于对JUnit的支持</p><p><strong>@RunWith(SpringJunit4ClassRunner.class)</strong></p><p>@<strong>ContextConfiguration</strong> 用来加载配置ApplicationContext，其中classes属性用来加载配置类</p><p><strong>@ContextConfiguration(classes={TestCofig.class})</strong></p><p><img src="https://i.loli.net/2020/01/16/CnVYFilU4Se3OZ2.png" alt="error"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spring的5种制动装配模式&quot;&gt;&lt;a href=&quot;#spring的5种制动装配模式&quot; class=&quot;headerlink&quot; title=&quot;spring的5种制动装配模式&quot;&gt;&lt;/a&gt;spring的5种制动装配模式&lt;/h1&gt;&lt;p&gt;1.no          　　——</summary>
      
    
    
    
    
    <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring-3其他引用类型的注入</title>
    <link href="http://yoursite.com/2019/11/28/spring-3%E5%85%B6%E4%BB%96%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2019/11/28/spring-3%E5%85%B6%E4%BB%96%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%B3%A8%E5%85%A5/</id>
    <published>2019-11-28T02:24:19.000Z</published>
    <updated>2020-01-16T09:15:17.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring注入其他类型"><a href="#spring注入其他类型" class="headerlink" title="spring注入其他类型"></a>spring注入其他类型</h1><h2 id="对数组注入"><a href="#对数组注入" class="headerlink" title="对数组注入"></a>对数组注入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>中国银行金卡<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>农业银行借记卡<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>交通银行信用卡<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对list注入"><a href="#对list注入" class="headerlink" title="对list注入"></a>对list注入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>"zhangsan123"<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>12435665<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"dog02"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对set注入"><a href="#对set注入" class="headerlink" title="对set注入"></a>对set注入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--     &lt;property name="set"&gt;</span></span><br><span class="line"><span class="comment">    &lt;set&gt;</span></span><br><span class="line"><span class="comment">    &lt;value&gt;zhangsan&lt;/value&gt;</span></span><br><span class="line"><span class="comment">    &lt;value&gt;lisi&lt;/value&gt;</span></span><br><span class="line"><span class="comment">    &lt;value&gt;wangwu&lt;/value&gt;</span></span><br><span class="line"><span class="comment">    &lt;value&gt;zhangsan&lt;/value&gt;</span></span><br><span class="line"><span class="comment">    &lt;/set&gt;</span></span><br><span class="line"><span class="comment">       &lt;/property&gt; --&gt;</span></span><br><span class="line">       </span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"dog"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"dog02"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对map注入"><a href="#对map注入" class="headerlink" title="对map注入"></a>对map注入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;property name="map"&gt;</span></span><br><span class="line"><span class="comment">&lt;map&gt;</span></span><br><span class="line"><span class="comment">&lt;entry key="100" value="hfc"&gt;&lt;/entry&gt;</span></span><br><span class="line"><span class="comment">&lt;entry key="200" value="hfc123"&gt;&lt;/entry&gt;</span></span><br><span class="line"><span class="comment">&lt;/map&gt;</span></span><br><span class="line"><span class="comment">&lt;/property&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"101"</span> <span class="attr">value-ref</span>=<span class="string">"dog"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"102"</span> <span class="attr">value-ref</span>=<span class="string">"dog02"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对properties注入"><a href="#对properties注入" class="headerlink" title="对properties注入"></a>对properties注入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driver"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"root"</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spring注入其他类型&quot;&gt;&lt;a href=&quot;#spring注入其他类型&quot; class=&quot;headerlink&quot; title=&quot;spring注入其他类型&quot;&gt;&lt;/a&gt;spring注入其他类型&lt;/h1&gt;&lt;h2 id=&quot;对数组注入&quot;&gt;&lt;a href=&quot;#对数组注入&quot; c</summary>
      
    
    
    
    
    <category term="spring对其他类型参数的注入" scheme="http://yoursite.com/tags/spring对其他类型参数的注入/"/>
    
  </entry>
  
  <entry>
    <title>spring-2核心技术</title>
    <link href="http://yoursite.com/2019/11/28/spring-2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2019/11/28/spring-2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</id>
    <published>2019-11-27T16:20:01.000Z</published>
    <updated>2020-01-16T09:14:59.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h1><p>​        Spring Framework implementation of the Inversion of Control(<strong>IoC</strong>)<a href="https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference/beans.html#ftn.d5e1829" target="_blank" rel="noopener">[1]</a>。IoC 也称为依赖注入(DI)。</p><p>​        ioc—控制反转（对bean的控制权，现在反转给spring容器；让spring容器帮我们去创建对象）。</p><p>​        name 控制反转(IoC)，bean 本身通过使用 classes 的直接构造或诸如 Service Locator pattern 之类的机制来控制其依赖关系的实例化或位置。</p><h2 id="两个基本依赖"><a href="#两个基本依赖" class="headerlink" title="两个基本依赖"></a>两个基本依赖</h2><p>​        <code>org.springframework.beans</code>和<code>org.springframework.context</code>包是 Spring Framework 的 IoC 容器的<strong>基础</strong>。 <a href="https://docs.spring.io/spring-framework/docs/4.3.21.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener">Bean 工厂</a>接口提供了一种高级 configuration 机制，能够<strong>管理任何类型的 object</strong>。 <a href="https://docs.spring.io/spring-framework/docs/4.3.21.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener">ApplicationContext</a>是<code>BeanFactory</code>的 sub-interface。它增加了 Spring 的 <strong>AOP features</strong> 更容易整合;<strong>消息资源处理</strong>(用于国际化)，<strong>事件发布</strong>;和 <strong>application-layer 特定的上下文</strong>，例如用于 web applications。</p><p>​        <code>BeanFactory</code>提供 configuration framework 和基本功能，<code>ApplicationContext</code>添加更多 enterprise-specific 功能。 <code>ApplicationContext</code>是<code>BeanFactory</code>的完整超集。</p><h1 id="DI（依赖注入）"><a href="#DI（依赖注入）" class="headerlink" title="DI（依赖注入）"></a>DI（依赖注入）</h1><p>​        <strong>依赖注入</strong>意思就是，spring主动创建被调用类的对象，然后把这个对象注入到我们自己的类中，使得我们可以使用它。</p><p>​        di(dependency injection) 依赖注入: 实际上di和ioc是<strong>同一个概念</strong>，spring设计者认为di更准确表示spring核心技术。（就是根据具体的bean把具体的内容注入到里边，你需要的时候就自动给你注入内容进去）  di是spring 的实现<strong>思想上的概念</strong>；ioc是你的<strong>具体的实现</strong>；</p><p>spring的装配模式：</p><p>1.· 基于Java文件的显式装配（通过Java代码new对象）</p><p>2.· 基于XML文件的显式装配（通过bean.xml配置）</p><p>3.· 隐式bean发现机制和自动装配（通过注解方式）</p><h2 id="注入的方式3种"><a href="#注入的方式3种" class="headerlink" title="注入的方式3种"></a>注入的方式3种</h2><p>依赖注入的方式有3种：—-你去注入属性的时候有这3种注入方式；</p><h3 id="接口注入"><a href="#接口注入" class="headerlink" title="接口注入"></a>接口注入</h3><p>接口注入（调用和实现分离）：不常用</p><h3 id="setter注入"><a href="#setter注入" class="headerlink" title="setter注入"></a>setter注入</h3><p><strong>setter注入</strong>（就是使用set方法为属性赋值）：set的注入，在你的这个bean文件，一定要有的set方法；</p><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><p><strong>构造器注入</strong></p><p>1.pom.xml文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring的核心和上下文是IOC容器的两个依赖基础 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//必须要写构造方法</span></span><br></pre></td></tr></table></figure><p>3.配置XML(与实体类相映射)</p><p>type：指定类型（可写可不写，但必须要与实体类属性类型一致）</p><p>index：指定传入参数的位置（可写可不写）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.hfc.bean.User"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span>  <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"456"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"String"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"3"</span> <span class="attr">value</span>=<span class="string">"西安"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"4"</span> <span class="attr">ref</span>=<span class="string">"dog001"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <font color="#ff0000">注意：容器是通过<strong>&lt; constructor-arg&gt;</strong>标签来进行传参数的，所以赋值的时候这个顺序和构造方法中的顺序参数类型都要一样 不能乱的来，即使你不给他注入内容，但是<strong>这个位置要占，不然就会产生异常</strong>。可以使用<strong>&lt; constructor-arg&gt;</strong>中的index属性解决这样的问题。还有指定类型。</font></p><h2 id="spring注入方式"><a href="#spring注入方式" class="headerlink" title="spring注入方式"></a>spring注入方式</h2><h3 id="XML文件注入"><a href="#XML文件注入" class="headerlink" title="XML文件注入"></a>XML文件注入</h3><p>1.set注入方式来进行；2.构造器注入；3.接口注入；</p><h3 id="注解注入"><a href="#注解注入" class="headerlink" title="注解注入"></a>注解注入</h3><p>· Spring为此提供了四个注解，这些注解的作用与上面的XML定义bean效果一致，在于将组件交给Spring容器管理。组件的名称默认是类名（首字母变小写），也可以自己修改：</p><p>· @Component：当对组件的<strong>层次难以定位</strong>的时候使用这个注解</p><p>· @Controller：表示<strong>控制层</strong>的组件</p><p>· @Service：表示<strong>业务逻辑层</strong>的组件</p><p>· @Repository：表示<strong>数据访问层</strong>的组件</p><p>1.在bean.xml里面定义扫描包(注解所在包)的位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hfc.bean"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.实体类（Teacher.java）上面标注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"Teacher"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"9999"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"王重阳"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"华山"</span>)</span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AOP（面向切面编程）"><a href="#AOP（面向切面编程）" class="headerlink" title="AOP（面向切面编程）"></a>AOP（面向切面编程）</h1><p>​        </p><h1 id="spring在开发中起到的作用"><a href="#spring在开发中起到的作用" class="headerlink" title="spring在开发中起到的作用"></a>spring在开发中起到的作用</h1><p>spring的核心就是提供管理bean；进行切面编程；</p><h2 id="spring框架原理图"><a href="#spring框架原理图" class="headerlink" title="spring框架原理图"></a>spring框架原理图</h2><p>spring框架原理图(sping框架什么时候被加载，spring中配置的bean,怎样被创建，bean与bean之间的关系怎样被维护)</p><p><img src="https://i.loli.net/2020/01/16/5ITBuzO7ZmnUvsV.png" alt="error"></p><h2 id="如何创建实体类对象"><a href="#如何创建实体类对象" class="headerlink" title="如何创建实体类对象"></a>如何创建实体类对象</h2><p>1.使用beanfactory来管理bean—这个方法已经被<strong>废止</strong>了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Resource resource=<span class="keyword">new</span> ClassPathResource(<span class="string">"student.xml"</span>);</span><br><span class="line">BeanFactory beanFactory=<span class="keyword">new</span> XmlBeanFactory(resource);</span><br><span class="line">Student student=(Student)beanFactory.getBean(<span class="string">"student"</span>);</span><br></pre></td></tr></table></figure><p>2.现在使用：ApplicationContext接口来读取配置文件并读取相应的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"student.xml"</span>);</span><br><span class="line">Student student=(Student)applicationContext.getBean(<span class="string">"student"</span>);</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure><h2 id="spring中的单例"><a href="#spring中的单例" class="headerlink" title="spring中的单例"></a>spring中的单例</h2><p>​        一般我们在用的时候都会写一个工具类,也就是说ApplicationContext 要把这个做成单例模式，不然的话创建多了会影响。</p><p><strong>spring配置文件中的单例跟设计模式中单例含义不一样：</strong></p><p>（1）<strong>设计模式中单例</strong>指：在JVM启动过程中，对于某一个类，如果类是单例，它<strong>只会生成唯一的实例</strong></p><p>（2）<strong>spring 配置中单例</strong>指：对于每一个IOC容器,它只会生成唯一的实例，如果在JVM启动时有两个IOC容器, 每个容器都会生成这个类的唯一实例,显然此时生成了该类的两个实例</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>​        使用接口编程实现层和层之间的<strong>降低耦合度</strong>：因为在写的时候我们可以使用接口的方式来进行编写程序，具体的实现我们并不关心，我们只关注这个方法。这样的话每个层之间的关系并不是那么的紧密了，就会降低耦合度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IOC容器&quot;&gt;&lt;a href=&quot;#IOC容器&quot; class=&quot;headerlink&quot; title=&quot;IOC容器&quot;&gt;&lt;/a&gt;IOC容器&lt;/h1&gt;&lt;p&gt;​        Spring Framework implementation of the Inversion </summary>
      
    
    
    
    
    <category term="spring核心" scheme="http://yoursite.com/tags/spring核心/"/>
    
  </entry>
  
  <entry>
    <title>打印日志Logging</title>
    <link href="http://yoursite.com/2019/11/27/%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97Logging/"/>
    <id>http://yoursite.com/2019/11/27/%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97Logging/</id>
    <published>2019-11-27T02:56:06.000Z</published>
    <updated>2019-11-27T10:45:02.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><h3 id="spring为什么引入Logging"><a href="#spring为什么引入Logging" class="headerlink" title="spring为什么引入Logging"></a>spring为什么引入Logging</h3><p>​        Logging 是 Spring 的一个非常重要的依赖项，因为 </p><p>a)它是唯一的<strong>强制外部依赖项</strong>；</p><p>b)每个人都喜欢从他们正在使用的工具中看到一些<strong>输出</strong>；</p><p>c)Spring 集成了许多其他工具，所有这些工具也都做了选择 <strong>logging 依赖</strong>。</p><h3 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h3><p>​        Spring 中的强制 logging 依赖是 <strong>Jakarta Commons Logging _API(JCL)</strong>。针对 <strong>JCL</strong> 进行编译，并且我们还为扩展 <strong>Spring Framework</strong> 的 classes 显示 <strong>JCL <code>Log</code> objects</strong>。</p><p>​        对于使用者来说重要的是 Spring 的所有版本都使用相同的 <strong>logging library</strong>：迁移很容易，因为即使使用<strong>扩展 Spring 的 applications</strong> 也可以保留向后兼容性。我们这样做的方法是让 Spring 中的一个模块明确依赖<code>commons-logging</code><strong>(JCL 的规范 实现)</strong>，然后<strong>让所有其他模块依赖于 compile time</strong>。</p><p>​        如果你正在使用 Maven 做项目，并想知道你在哪里找到了对<code>commons-logging</code>的<strong>依赖</strong>，那么它来自 Spring，特别的是来自名为<code>spring-core</code>的<strong>中央模块</strong>。</p><h3 id="Logging的运行机制"><a href="#Logging的运行机制" class="headerlink" title="Logging的运行机制"></a>Logging的运行机制</h3><p>​        关于<code>commons-logging</code>的<strong>好处</strong>是你不需要任何其他东西来使你的 application 工作。它有一个<strong>运行时发现算法</strong>，可以在 classpath （路径）中的众所周知的位置<strong>查找其他 logging 框架</strong>，并使用它<strong>认为合适的一个</strong>(或者如果需要，<strong>也可以告诉它哪一个</strong>)。</p><p>​        如果没有其他可用的东西，你可以从 <strong>JDK(简称 java.util.logging 或 JUL)</strong>获得相当漂亮的日志。在大多数情况下，您应该发现 Spring application 正常工作并<strong>记录到 console</strong> 开箱即用，这很重要。</p><h2 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h2><p><font color="#ff0000"><strong>注意：</strong>这是使用log4j不同版本的前提，特别要提的是注意使用版本(log4j)号</font></p><blockquote><h4 id="使用-Log4j-1-2-或-2-x"><a href="#使用-Log4j-1-2-或-2-x" class="headerlink" title="使用 Log4j 1.2 或 2.x"></a>使用 Log4j 1.2 或 2.x</h4><p>Log4j 1.2 同时也是 EOL。此外，Log4j 2.3 是最后一个 Java 6 兼容版本，新版本的 Log4j 2.x 版本需要 Java 7。</p></blockquote><p>​        <a href="https://logging.apache.org/log4j" target="_blank" rel="noopener">Log4j</a>是我们 build Spring 时在运行时使用的。 Spring 还提供了一些用于配置和初始化 Log4j 的实用程序，因此在某些模块中它对 Log4j 具有可选的 compile-time 依赖性。</p><h3 id="使用Log4j-1-2版本的配置"><a href="#使用Log4j-1-2版本的配置" class="headerlink" title="使用Log4j 1.2版本的配置"></a>使用Log4j 1.2版本的配置</h3><h4 id="spring默认JCL依赖（commons-logging）的配置"><a href="#spring默认JCL依赖（commons-logging）的配置" class="headerlink" title="spring默认JCL依赖（commons-logging）的配置"></a>spring默认JCL依赖（commons-logging）的配置</h4><p>​        要使 Log4j 1.2 使用默认的 JCL 依赖项(<code>commons-logging</code>)，您需要做的就是将 Log4j 放在 classpath 上，并为其提供 <strong>configuration 文件</strong>(classpath 的根目录中的<code>log4j.properties</code>或<code>log4j.xml</code>)。</p><p>​    所以对于 Maven 用户来说这是依赖声明：</p><h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><p>需要引用两个依赖：（1）<strong>spring-core</strong>；（2）<strong>log4j</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.21.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置log4j-properties文件"><a href="#配置log4j-properties文件" class="headerlink" title="配置log4j.properties文件"></a>配置log4j.properties文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootCategory=INFO, stdout</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; %5p %t %c&#123;2&#125;:%L - %m%n</span><br><span class="line"></span><br><span class="line">log4j.category.org.springframework.beans.factory=DEBUG</span><br></pre></td></tr></table></figure><h3 id="使用Log4j2-x版本的配置"><a href="#使用Log4j2-x版本的配置" class="headerlink" title="使用Log4j2.x版本的配置"></a>使用Log4j2.x版本的配置</h3><h4 id="使用Log4j-2-x-版本的配置"><a href="#使用Log4j-2-x-版本的配置" class="headerlink" title="使用Log4j 2.x 版本的配置"></a>使用Log4j 2.x 版本的配置</h4><p>​        要将 <strong>Log4j 2.x 与 JCL</strong> 一起使用，要做的就是将 Log4j 放在 classpath 上，并为其提供配置文件(<code>log4j2.xml</code>，<code>log4j2.properties</code>或其他<a href="https://logging.apache.org/log4j/2.x/manual/configuration.html" target="_blank" rel="noopener">支持的 configuration 格式</a>)。</p><p>​        对于 Maven 用户，所需的最小依赖项是：</p><h5 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h5><p>需要引入两个依赖：（1）log4j-core；（2）log4j-jcl；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-jcl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color="#00f">        <strong>特别的：</strong></font></p><p>​        如果你还希望启用 <strong>SLF4J(Simple logging Facade for Java)</strong> 委派给 Log4j，如： 对于默认使用 SLF4J 的其他 libraries，还需要以下依赖项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="XML配置实例"><a href="#XML配置实例" class="headerlink" title="XML配置实例"></a>XML配置实例</h5><p>这是一个 例子 <code>log4j2.xml</code> for logging 到 console：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"WARN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.beans.factory"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="避免-Commons-Logging（JCL）"><a href="#避免-Commons-Logging（JCL）" class="headerlink" title="避免 Commons Logging（JCL）"></a>避免 Commons Logging（JCL）</h3><p>​        遗憾的是，标准<code>commons-logging</code> API 中的运行时发现算法虽然方便了最终用户（ end-user），但可能会出现问题。如果您想<strong>避免使用 JCL 的标准查找</strong>，基本上有两种方法可以将其关闭：</p><ul><li>从<code>spring-core</code>模块中<strong>排除依赖关系</strong>(因为它是唯一明确依赖于<code>commons-logging</code>的模块)</li><li>依赖于一个特殊的<code>commons-logging</code>依赖项，用 jar 替换 library(更多细节可以在<a href="http://slf4j.org/faq.html#excludingJCL" target="_blank" rel="noopener">SLF4J 常见问题</a>中找到)</li></ul><p>要排除 commons-logging，需将以下内容添加到<code>dependencyManagement</code>部分：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.21.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        现在这个 application 目前已经被破坏，因为 class 路径上没有_Lmple API 的 implementation，所以为了修复它，必须提供一个新的。</p><p>​        所以在下面将会说到如何<strong>使用 SLF4J 提供 JCL 的替代</strong> implementation。</p><h2 id="SLF4J"><a href="#SLF4J" class="headerlink" title="SLF4J"></a>SLF4J</h2><p><font color="#ff0000">将 SLF4J 与 Log4j 或 Logback 一起使用</font></p><h3 id="SLF4J概念"><a href="#SLF4J概念" class="headerlink" title="SLF4J概念"></a>SLF4J概念</h3><p>​        Simple Logging Facade for Java(<a href="http://www.slf4j.org/" target="_blank" rel="noopener">SLF4J</a>)是一个流行的 API，由 Spring 常用的其他 libraries 使用。它通常与<a href="https://logback.qos.ch/" target="_blank" rel="noopener">logback</a>一起使用，这是 SLF4J API 的原生 implementation。</p><p>​        SLF4J 提供了对许多 common logging 框架的<strong>绑定</strong>，包括 Log4j，它也反过来了：其他 logging 框架和它自己之间的桥梁。因此，要将 SLF4J 与 Spring 一起使用，需<strong>要将<code>commons-logging</code>依赖项替换为 SLF4J-JCL bridge</strong>。完成后，Spring 中的 <strong>logging calls 将被转换为 logging calls 到 SLF4J API</strong>，因此如果 application 中的其他 libraries 使用该 API，那么只需一个地方来配置和管理 logging。</p><p>​        common 的选择可能是 <strong>bridge Spring 到 SLF4J</strong>，然后从 SLF4J 向 Log4j 提供<strong>显式的 binding</strong>。您需要提供<strong>多个依赖项</strong>(并排除现有的<code>commons-logging</code>)：<strong>JCL bridge</strong>，<strong>SLF4j binding 到 Log4j</strong>，以及 <strong>Log4j 提供程序本身</strong>。</p><p>​        在 Maven 你会这样做：</p><h4 id="添加依赖-2"><a href="#添加依赖-2" class="headerlink" title="添加依赖"></a>添加依赖</h4><h5 id="一："><a href="#一：" class="headerlink" title="一："></a>一：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.21.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="二："><a href="#二：" class="headerlink" title="二："></a>二：</h5><p>​        SLF4J 用户中使用较少步骤并产生<strong>较少依赖关系</strong>的更常见选择是直接绑定到<a href="http://logback.qos.ch/" target="_blank" rel="noopener">logback</a>。这删除了额外的 <strong>binding step</strong>，因为 <strong>Logback 直接实现了 SLF4J</strong>，所以你只需要依赖<strong>两个 libraries</strong>，即<code>jcl-over-slf4j</code>和<code>logback</code>)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JUL-java-util-logging"><a href="#JUL-java-util-logging" class="headerlink" title="JUL(java.util.logging)"></a>JUL(java.util.logging)</h2><p>​        Commons Logging _will 默认委托给<code>java.util.logging</code>，前提是在 classpath 上没<strong>有检测到 Log4j</strong>。所以没有特殊的依赖关系来设置：只需在 log输出到<code>java.util.logging</code>时使用没有外部依赖关系的 Spring，或者在独立的 application(在 JDK level 中使用自定义或默认 JUL 设置)或者使用 application 服务器的 log 系统(和它的 system-wide JUL 设置)。</p><h2 id="Commons-Logging-on-WebSphere"><a href="#Commons-Logging-on-WebSphere" class="headerlink" title="Commons Logging _on WebSphere"></a>Commons Logging _on WebSphere</h2><p>​        <strong>Spring applications</strong> 可能会在一个容器上运行，该容器本身提供<strong>_Lmple</strong> 的实现，</p><p>例如. IBM 的 <strong>WebSphere Application Server(WAS)</strong>。这不会导致问题本身，但会导致需要理解的两种不同情况：在“<strong>parent first”ClassLoader</strong> 委托 model(WAS 中的默认值)中，applications 将始终获取 Commons Logging 的 <strong>server-provided version</strong>，委托给 WAS logging 子系统(实际上是<strong>基于 JUL</strong>)。 <strong>JCL 的 application-provided 变体</strong>，无论是<strong>标准 Commons Logging</strong> 还是 <strong>JCL-over-SLF4J bridge</strong>，都将被有效地忽略，以及任何本地包含的 log 提供者。</p><p>​        总而言之，我们建议在“parent last”model 中部署 Spring applications，因为它自然<strong>允许本地提供程序以及服务器的 log 子系统</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;打印日志&quot;&gt;&lt;a href=&quot;#打印日志&quot; class=&quot;headerlink&quot; title=&quot;打印日志&quot;&gt;&lt;/a&gt;打印日志&lt;/h1&gt;&lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h</summary>
      
    
    
    
    
    <category term="log4j" scheme="http://yoursite.com/tags/log4j/"/>
    
  </entry>
  
  <entry>
    <title>spring框架1-入门了解</title>
    <link href="http://yoursite.com/2019/11/25/spring-1%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E4%BA%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/11/25/spring-1%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E4%BA%86%E8%A7%A3/</id>
    <published>2019-11-25T15:41:53.000Z</published>
    <updated>2020-01-16T09:14:12.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><h2 id="引入spring"><a href="#引入spring" class="headerlink" title="引入spring"></a>引入spring</h2><p>作为 application 开发人员，可以从 Spring 平台中受益的示例如下：</p><ul><li>使 Java 方法在<strong>数据库 transaction</strong> 中执行，而不必处理 transaction API。</li><li>使<strong>本地 Java 方法</strong>成为 <strong>HTTP 端点</strong>，而无需处理 Servlet API。</li><li>使<strong>本地 Java 方法</strong>成为<strong>消息处理程序</strong>，而无需处理 JMS API。</li><li>使<strong>本地 Java 方法</strong>成为 <strong>management 操作</strong>，而无需处理 JMX API。</li></ul><p>​        Spring是于2003 年兴起的一个轻量级的Java 开发框架，由<strong>Rod Johnson</strong>创建。简单来说，Spring是一个分层的JavaSE/EE  <strong>full-stack(一站式)</strong> <a href="http://baike.baidu.com/item/轻量级/10002835" target="_blank" rel="noopener">轻量级</a>开源框架。</p><h2 id="spring模块"><a href="#spring模块" class="headerlink" title="spring模块"></a>spring模块</h2><p>​        Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式，如图 1 所示。</p><p>Spring是由7部分模块组成一个框架； 依赖于核心模块；</p><p><img src="https://i.loli.net/2020/01/16/xnMsNq5bjm6hU9g.png" alt="error"></p><p>Spring core—-这个是spring的核心模块；其他模块要使用的时候必须依附核心模块；</p><p>组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</p><p><strong>·</strong> <strong>核心容器</strong>（core）：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用<em>控制反转</em> （IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。（主要就是要用来完成你的bean的创建工作）</p><p><strong>·</strong> <strong>Spring 上下文</strong>（context）：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。（他主要就是使用配置的方式来完成你的一些服务的加入）</p><p><strong>·</strong> <strong>Spring AOP</strong>：通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。（也是通过配置的方式在你的配置文件中配置你的aop就可以完成spring 的面向切面编程—-例子：就是相当我们这个银行，我们在进入银行们的时候，就有摄像头，这个摄像头对的就门口这个位置，他会对你的这个位置进行监控；我们可以对你的摄像头进行编程；）</p><p><strong>·</strong> <strong>Spring ORM</strong>：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系映射工具（我们写的具体的实体类和数据库表直接映射上），其中包括 JDO、Hibernate（orm） 和 iBatis SQL Map（mybatis）。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。（这个模块是使用对象关系映射操作）</p><p><strong>·</strong> <strong>Spring Web 模块</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</p><p>Spring框架要是是你的web进行整合的时候我们就要加入你的springweb模块；</p><p><strong>·</strong> <strong>Spring MVC 框架</strong>：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。（他主要处理你的业务层的操作，以及你的视图展示）  当你使用spring来解决你的控制层的操作和视图层展示操作的时候； 就必须加入你的mvc；</p><p>· Spring dao 使用spring来完成数据库操作的时候，就的加入dao这个模块；可以完成我们的数据库操作；</p><p>· Spring 框架的功能可以用在任何 J2EE 服务器中，大多数功能也适用于不受管理的环境。Spring 的核心要点是：支持不绑定到特定 J2EE 服务的可重用业务和数据访问对象。毫无疑问，这样的对象可以在不同 J2EE 环境 （Web 或 EJB）、独立应用程序、测试环境之间重用。</p><h2 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h2><p>Spring给我们开发提供最关键的技术（ioc和aop）</p><p><strong>IOC Inversion of Control （控制反转）</strong>和 <strong>AOP（Aspect Oriented Programming（面向切面））</strong></p><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p><strong>控制反转模式</strong>（也称作依赖性介入—<strong>依赖注入</strong>）的基本概念是：不创建对象，但是描述创建它们的方式。在代码中不直接与对象和服务连接，但在配置文件中描述哪一个组件需要哪一项服务。容器 （在 Spring 框架中是 IOC 容器） 负责将这些联系在一起。</p><p>（就是用来通过配置文件的方式然后把你要对象传递给你）</p><p>不需要自己去创建对象，只需在spring进行配置（描述）就可以。</p><p><strong>在写程序的时候，以前新建个对象的时候，通过new的方式来创建对象；</strong></p><p><strong>现在创建对象的时候，不需要去new，只需要把你的需要那个对象告诉spring容器； spring容器通过工厂创建对象，就可以直接拿过来使用对象；</strong></p><p>在典型的 IOC 场景中，容器创建了所有对象，并设置必要的属性将它们连接在一起，决定什么时间调用方法。下表列出了 IOC 的一个实现模式。</p><table><thead><tr><th><strong>类型 1</strong></th><th><strong>服务需要实现专门的接口，通过接口，由对象提供这些服务，可以从对象查询依赖性（例如，需要的附加服务）</strong></th></tr></thead><tbody><tr><td>类型 2</td><td>通过 JavaBean 的属性（例如 setter 方法）分配依赖性</td></tr><tr><td>类型 3</td><td>依赖性以构造函数的形式提供，不以 JavaBean 属性的形式公开</td></tr></tbody></table><p>Spring 框架的 IOC 容器采用类型 2 和类型3 实现控制反转；</p><p>控制反转—就是把对你的对象的控制权转换了，以前是自己创建，现在交给spring来进行。</p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>​        面向方面的编程，即 AOP，是一种编程技术，它允许程序员对横切关注点或横切典型的职责分界线的行为（例如日志和事务管理）进行模块化。AOP 的核心构造是方面，它将那些影响多个类的行为封装到可重用的模块中。</p><p>​        AOP 和 IOC 是补充性的技术，它们都运用模块化方式解决企业应用程序开发中的复杂问题。在典型的面向对象开发方式中，可能要将日志记录语句放在所有方法和 Java 类中才能实现日志功能。在 AOP 方式中，可以反过来将日志服务模块化，并以声明的方式将它们应用到需要日志的组件上。当然，优势就是 Java 类不需要知道日志服务的存在，也不需要考虑相关的代码。所以，用 Spring AOP 编写的应用程序代码是<strong>松散耦合</strong>的。</p><p>AOP 的功能完全集成到了 Spring 事务管理、日志和其他各种特性的上下文中。</p><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><p>​        spring里边ioc是结合你的javabean的思想； 紧密的和你的javabean结合一起；就能够注入你的对应的类；</p><p>​        Spring 设计的核心是 org.springframework.beans 包，设计目标是与 JavaBean 组件一起使用。这个包通常不是由用户直接使用，而是由服务器将其用作其他多数功能的底层中介。下一个最高级抽象是 BeanFactory 接口，它是工厂设计模式的实现，允许通过名称创建和检索对象。BeanFactory 也可以管理对象之间的关系。</p><p>​        Spring里边的通过xml文件创建出来的bean是通过工厂：bean工厂；</p><h2 id="java的设计模式"><a href="#java的设计模式" class="headerlink" title="java的设计模式"></a>java的设计模式</h2><p>Java开发里边的设计模式：<strong>23种</strong>；</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式:单例模式是在你的类中构造方法私有化； 不管你在外边创建出来的对象有多少个；对应到我这个类中只有一个； </p><p> <strong>单例模式的实现方式：</strong></p><p><strong>饿汉模式</strong>（线程安全，线程不安全）；一上来非常饿就创建对象；</p><p><strong>懒汉模式</strong>（线程安安全和线程不安全）；一上来因为很懒，只有在调用的时候才会去创建对象；</p><p><strong>内部类的方式</strong>实现单例（线程安装和线程不安装）</p><p>使用<strong>枚举</strong>的方式来实现单例；</p><p>使用<strong>双重校验的方式</strong>来实现单例；（一般我们在进行代码的设计的时候，以及你的框架中都使用的是  双重校验的方式来实现）</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>​        工厂模式：我们在使用每一个bean的对象，我们都是通过工厂来创建；</p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>​        代理模式： 就我们生活票贩子；我们直接去买票买不到的时候，可用通过代理的地方买票；火车票代售点；</p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><h2 id="两个对象模型"><a href="#两个对象模型" class="headerlink" title="两个对象模型"></a>两个对象模型</h2><h3 id="单例模型"><a href="#单例模型" class="headerlink" title="单例模型"></a>单例模型</h3><p>​        <strong>单态</strong> （单例模型）模型提供了具有特定名称的对象的共享实例，可以在查询时对其进行检索。Singleton 是默认的也是最常用的对象模型。对于无状态服务对象很理想。</p><p>就是我们的spring注入进来的对象是单例模式；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student student=(Student)applicationContext.getBean(<span class="string">"student"</span>);</span><br><span class="line"></span><br><span class="line">Student student2=(Student)applicationContext.getBean(<span class="string">"student"</span>);</span><br><span class="line"><span class="comment">//student和student2是同一个地址</span></span><br></pre></td></tr></table></figure><p><font color="#ff0000">注意：</font>单例模式来进行创建出来的对象； 通过spring创建出来的对象都是单例模式的，不管你在外边创建多个对象对应到里边的时候是一个；</p><h3 id="原型-模型"><a href="#原型-模型" class="headerlink" title="原型 模型"></a><strong>原型</strong> 模型</h3><p><strong>·</strong> <strong>原型</strong> 模型确保每次检索都会创建单独的对象。在每个用户都需要自己的对象时，原型模型最适合。</p><p>我们的spring创建bean的时候，就用的是bean工厂来创建；ioc的基础也就是bean工厂；</p><h2 id="BeanFactory-接口"><a href="#BeanFactory-接口" class="headerlink" title="BeanFactory 接口"></a>BeanFactory 接口</h2><p>​        因为 org.springframework.beans.factory.BeanFactory 是一个简单接口，所以可以针对各种底层存储方法实现。最常用的BeanFactory 定义是 XmlBeanFactory，它根据 XML 文件中的定义装入 bean，如清单 1 所示。</p><h3 id="清单1-XmlBeanFactory"><a href="#清单1-XmlBeanFactory" class="headerlink" title="清单1 - XmlBeanFactory"></a>清单1 - XmlBeanFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory factory = <span class="keyword">new</span> XMLBeanFactory(<span class="keyword">new</span> FileInputSteam(<span class="string">"mybean.xml"</span>));</span><br></pre></td></tr></table></figure><p>在 XML 文件中定义的 Bean 是被消极加载的，这意味在需要 bean 之前，bean 本身不会被初始化。要从 BeanFactory 检索 bean，只需调用getBean() 方法，传入将要检索的 bean 的名称即可，如清单 2 所示。</p><h3 id="清单-2-getBean"><a href="#清单-2-getBean" class="headerlink" title="清单 2 - getBean()"></a>清单 2 - getBean()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyBean mybean = (MyBean) factory.getBean(<span class="string">"mybean"</span>);</span><br></pre></td></tr></table></figure><p>​        每个 bean 的定义都可以是 POJO （用类名和 JavaBean 初始化属性定义） 或 FactoryBean。FactoryBean 接口为使用 Spring 框架构建的应用程序添加了一个间接的级别。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Resource resource=<span class="keyword">new</span> ClassPathResource(<span class="string">"student.xml"</span>);</span><br><span class="line"></span><br><span class="line">BeanFactory beanFactory=<span class="keyword">new</span> XmlBeanFactory(resource);</span><br><span class="line">Student student=(Student)beanFactory.getBean(<span class="string">"student"</span>);</span><br><span class="line">student.show();</span><br></pre></td></tr></table></figure><p>spring在进行具体的创建bean的时候，是通过<strong>工厂</strong>来创建:BeanFactory；</p><p>Spring的ioc里边已经使用我们的设计模式中的：<strong>工厂模式和单例模式</strong>；</p><p>Spring中的属性映射到你的对象上的时候—-使用的是<strong>反射机制</strong>；</p><h2 id="几个很重要的缩写"><a href="#几个很重要的缩写" class="headerlink" title="几个很重要的缩写"></a>几个很重要的缩写</h2><h3 id="POJO（Plain-Ordinary-Java-Object）"><a href="#POJO（Plain-Ordinary-Java-Object）" class="headerlink" title="POJO（Plain Ordinary Java Object）"></a>POJO（Plain Ordinary Java Object）</h3><p>一、POJO（Plain Ordinary Java Object）。—就是你的实体类</p><p>简单而言，就是一个简单的对象，而且没有任何规则约束。有的时候拿<a href="http://www.sojson.com/tag_pojo.html" target="_blank" rel="noopener"> POJO  </a>来泛指用来做传输对象 Java bean （包括<a href="http://www.sojson.com/tag_dto.html" target="_blank" rel="noopener"> DTO  </a>、<a href="http://www.sojson.com/tag_vo.html" target="_blank" rel="noopener"> VO  </a>、<a href="http://www.sojson.com/tag_bo.html" target="_blank" rel="noopener"> BO  </a>、<a href="http://www.sojson.com/tag_po.html" target="_blank" rel="noopener"> PO  </a>等）也是可以的。</p><p>和那个javabean是一样的；里边有属性也有对应的get和set方法；</p><h3 id="DTO（Data-Transfer-Object）"><a href="#DTO（Data-Transfer-Object）" class="headerlink" title="DTO（Data Transfer Object）"></a>DTO（Data Transfer Object）</h3><p>二、DTO（Data Transfer Object）—能够传输数据的对象；</p><p>数据传输对象，单纯用来数据传输的对象。我们有的项目又分InDto 和OutDto ，顾名思义就是输入和输出的<a href="http://www.sojson.com/tag_dto.html" target="_blank" rel="noopener">Dto  </a>。</p><p><font color="#ff0000">理解为页面进行注册的时候：会传递一个用户的相关的<strong>属性信息</strong>；我们通过前端页面传递数据到你的controller或者servlet时候；servlet来接收前端传过来的时候数据的时候；直接是request获取你的每一个属性给到变量上；  其实我们可以做一个和你前端传递过来数据属性一样的<strong>一个类</strong>；在通过类直接传递；这样的就是dto</font></p><h3 id="PO（Persistant-Object）"><a href="#PO（Persistant-Object）" class="headerlink" title="PO（Persistant Object）"></a>PO（Persistant Object）</h3><p>三、PO（Persistant Object）—就是在进行数据库操作的时候，和表关联的实体类； </p><p>持久对象，可以看成是与数据库中的表相映射的<a href="http://www.sojson.com/tag_java.html" target="_blank" rel="noopener"> Java  </a>对象。最简单的<a href="http://www.sojson.com/tag_po.html" target="_blank" rel="noopener"> PO  </a>就是对应数据库中某个表中的一条记录，多个记录可以用<a href="http://www.sojson.com/tag_po.html" target="_blank" rel="noopener"> PO  </a>的集合。<a href="http://www.sojson.com/tag_po.html" target="_blank" rel="noopener"> PO  </a>不包含业务逻辑和数据逻辑。就是一个Entity（实体类） 或者说 ModelEntity 。</p><p><font color="#ff0000">数据库中<strong>每一个表都对应一个实体类</strong>，只要是从你的数据库中对应过来的类；就是po类；</font></p><h3 id="BO（Business-Object）"><a href="#BO（Business-Object）" class="headerlink" title="BO（Business Object）"></a>BO（Business Object）</h3><p>四、BO（Business Object） service 层的对象，就叫的是bo</p><p>业务对象，我经常使用的一个，它是和业务挂钩的，简单来说，我们每个业务可能需要很多<a href="http://www.sojson.com/tag_po.html" target="_blank" rel="noopener"> PO  </a>（数据库表）来组成，而我们返回前端页面或者返回给调用方的时候，我们需要组合。而这个时候，<a href="http://www.sojson.com/tag_bo.html" target="_blank" rel="noopener"> BO  </a>就派上用场了，它就是一个对<a href="http://www.sojson.com/tag_po.html" target="_blank" rel="noopener"> PO  </a>的组合，也可以就是<a href="http://www.sojson.com/tag_po.html" target="_blank" rel="noopener"> PO  </a>，只是出发点是满足业务的传输对象。</p><p><font color="#ff0000">Service层里边需要的对象的时候，创建的那个<strong>实体类</strong>就是bo；</font></p><h3 id="VO（Value-Object）"><a href="#VO（Value-Object）" class="headerlink" title="VO（Value Object）"></a>VO（Value Object）</h3><p>五、VO（Value Object）</p><p>值对象，其实和<a href="http://www.sojson.com/tag_bo.html" target="_blank" rel="noopener"> BO  </a>、<a href="http://www.sojson.com/tag_dto.html" target="_blank" rel="noopener"> DTO  </a>、<a href="http://www.sojson.com/tag_po.html" target="_blank" rel="noopener"> PO  </a>差不多，只是更形象化了，<a href="http://www.sojson.com/tag_vo.html" target="_blank" rel="noopener"> VO  </a>更简单，没有任何思想，就是一个传输对象。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="1-spring中XML对类属性注入"><a href="#1-spring中XML对类属性注入" class="headerlink" title="1.spring中XML对类属性注入"></a>1.spring中XML对类属性注入</h2><p><font color="#ff0000">按照步骤来:</font></p><h3 id="添加依赖pom-xml"><a href="#添加依赖pom-xml" class="headerlink" title="添加依赖pom.xml"></a>添加依赖pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring的操作 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实体类（Student-java）"><a href="#实体类（Student-java）" class="headerlink" title="实体类（Student.java）"></a>实体类（Student.java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.address = address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"这个学生的信息为："</span>+getName()+<span class="string">"\t"</span>+id+<span class="string">"\t"</span>+getAddress());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注入实体类的XML配置"><a href="#注入实体类的XML配置" class="headerlink" title="注入实体类的XML配置"></a>注入实体类的XML配置</h3><h4 id="spring中bean和bean之间的关系"><a href="#spring中bean和bean之间的关系" class="headerlink" title="spring中bean和bean之间的关系"></a>spring中bean和bean之间的关系</h4><p><font color="#ff0000">注意：</font></p><h5 id="引用关系："><a href="#引用关系：" class="headerlink" title="引用关系："></a>引用关系：</h5><p>1.如果一个实体类中需要引用另一个实体类作为属性存在，那么需要在XML里面引入ref关键字；eg:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt; <span class="attr">property</span> <span class="attr">name</span>=<span class="string">"dog ref="</span><span class="attr">dog</span>"&gt;</span><span class="tag">&lt; /<span class="attr">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h5><p>2.（1）一个是在类中直接给定继承关系后，在xml文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"son"</span> <span class="attr">class</span>=<span class="string">"com.hfc.bean.Son"</span> <span class="attr">parent</span>=<span class="string">"father"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）可以不要parent属性，直接注入到子类实例上去</p><h4 id="bean-xml的配置"><a href="#bean-xml的配置" class="headerlink" title="bean.xml的配置"></a>bean.xml的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.hfc.bean.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span>  <span class="attr">value</span>=<span class="string">"666666"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"lisi"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"西安"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Test-java测试类"><a href="#Test-java测试类" class="headerlink" title="Test.java测试类"></a>Test.java测试类</h3><h4 id="法一：不使用spring-直接new对象"><a href="#法一：不使用spring-直接new对象" class="headerlink" title="法一：不使用spring 直接new对象"></a>法一：不使用spring 直接new对象</h4><h4 id="法二：使用ApplicationContext上下文来创建实体类"><a href="#法二：使用ApplicationContext上下文来创建实体类" class="headerlink" title="法二：使用ApplicationContext上下文来创建实体类"></a>法二：使用ApplicationContext上下文来创建实体类</h4><p><font color="#00f">关键类与方法：</font></p><p>类：<strong>ApplicationContext</strong>；<strong>ClassPathXmlApplicationContext</strong>；</p><p>方法：(Student)applicationContext.getBean(“student”)，需要强制类型转换。或者applicationContext.getBean(“student”，Student.class)这样就不需要强制类型转换。</p><h4 id="法三：先获取Resource对象，再通过BeanFactory来创建实体类对象"><a href="#法三：先获取Resource对象，再通过BeanFactory来创建实体类对象" class="headerlink" title="法三：先获取Resource对象，再通过BeanFactory来创建实体类对象"></a>法三：先获取Resource对象，再通过BeanFactory来创建实体类对象</h4><p><font color="#00f">关键类：</font></p><p>类：<strong>Resource;BeanFactory</strong>;<strong>XmlBeanFactory</strong>;</p><p>方法：(Student)beanFactory.getBean(“student”)，需要强制类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过的是没有使用spring来完成的bean的操作</span></span><br><span class="line"><span class="comment">//Student student=new Student();</span></span><br><span class="line"><span class="comment">//student.setName("zhansgan");</span></span><br><span class="line"><span class="comment">//student.setId(1231);</span></span><br><span class="line"><span class="comment">//student.setAddress("北京");</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//student.show();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Student student001=new Student();</span></span><br><span class="line"><span class="comment">//Student student002=new Student();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//System.out.println(student001+"\t"+student002);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//通过bean工厂得到实体类</span></span><br><span class="line"><span class="comment">//ApplicationContext applicationContext=</span></span><br><span class="line"><span class="comment">//new ClassPathXmlApplicationContext("student.xml");</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Student student=(Student)applicationContext.getBean("student");</span></span><br><span class="line"><span class="comment">//System.out.println(student);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Student student2=(Student)applicationContext.getBean("student");</span></span><br><span class="line"><span class="comment">//System.out.println(student2);</span></span><br><span class="line"><span class="comment">//student.show();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">Resource resource=<span class="keyword">new</span> ClassPathResource(<span class="string">"student.xml"</span>);</span><br><span class="line"></span><br><span class="line">BeanFactory beanFactory=<span class="keyword">new</span> XmlBeanFactory(resource);</span><br><span class="line">Student student=(Student)beanFactory.getBean(<span class="string">"student"</span>);</span><br><span class="line">student.show();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-注解注入"><a href="#2-注解注入" class="headerlink" title="2.注解注入"></a>2.注解注入</h2><p>Spring为此提供了四个注解，这些注解的作用与上面的XML定义bean效果一致，在于将组件交给Spring容器管理。组件的名称默认是类名（首字母变小写），也可以自己修改：</p><p>· @Component：当对组件的<strong>层次难以定位</strong>的时候使用这个注解</p><p>· @Controller：表示<strong>控制层</strong>的组件</p><p>· @Service：表示<strong>业务逻辑层</strong>的组件</p><p>· @Repository：表示<strong>数据访问层</strong>的组件</p><p>1.在bean.xml里面定义扫描包(注解所在包)的位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hfc.bean"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.实体类（Teacher.java）上面标注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"Teacher"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"9999"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"王重阳"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"华山"</span>)</span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spring&quot;&gt;&lt;a href=&quot;#spring&quot; class=&quot;headerlink&quot; title=&quot;spring&quot;&gt;&lt;/a&gt;spring&lt;/h1&gt;&lt;h2 id=&quot;引入spring&quot;&gt;&lt;a href=&quot;#引入spring&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
</feed>
